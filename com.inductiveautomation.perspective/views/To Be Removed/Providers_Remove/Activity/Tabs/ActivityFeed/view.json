{
  "custom": {
    "KPIs": 60
  },
  "events": {
    "system": {
      "onStartup": {
        "config": {
          "script": "\tproject \u003d \"RITI\" \n\temployer_id \u003d self.params.trackID\n\tresults \u003d []\n\t## Check if parameters are filled in correctly \n\tif (employer_id is None) or (int(employer_id) \u003c 0):\n\t\tvalid \u003d False\n\t\tsystem.perspective.print(\"Employer ID Error\")\n\telse:\n\t\tvalid \u003d True\n\t\tsystem.perspective.print(\"Data Valid\")\n\t\t\t\n\t### Check if data is valid otherwise show error message.\n\tif valid:\n\t\ttry:\n\t\t\t#Get KPI Info\n\t\t\tpath \u003d \"Employers/Detail/KPI\"\n\t\t\tparameters \u003d {\"employerID\":employer_id}\n\t\t\t#system.perspective.print(\u0027Delete Case Note: \u0027 + str(employer_id))\n\t\t\tresults \u003d system.db.runNamedQuery(project\u003dproject,path\u003dpath,parameters\u003dparameters, getKey\u003dTrue)\t\t\n\n\t\t\tif results is not None:\n\t\t\t\t#KPI1 Applicants\t\t\n\t\t\t\ttotalApplicants \u003d 0\n\t\t\t\thireDecisions \u003d 0\n\t\t\t\thiredApplicants \u003d 0\n\t\t\t\tfor row in range(results.getRowCount()):\n\t\t\t\t\tif results.getValueAt(row, \"applied_state\"):\n\t\t\t\t\t\ttotalApplicants +\u003d 1\n\t\t\t\t\t\t\n\t\t\t\t#KPI1 Hire Percentage\t\t\n\t\t\t\thireDecisions \u003d 0\n\t\t\t\thiredApplicants \u003d 0\n\t\t\t\tfor row in range(results.getRowCount()):\n\t\t\t\t\tif results.getValueAt(row, \"hired_state\") is not None:\n\t\t\t\t\t\thireDecisions +\u003d 1\n\t\t\t\t\t\tif results.getValueAt(row, \"hired_state\"):\n\t\t\t\t\t\t\thiredApplicants +\u003d 1\n\t\t\t\t\t\t\t\n\t\t\t\thiredApplicantsfloat \u003d float(hiredApplicants)\n\t\t\t\thireDecisionsfloat \u003d float(hireDecisions)\n\t\t\t\tif hireDecisionsfloat \u003e 1:\n\t\t\t\t\thirePercent \u003d int((hiredApplicantsfloat/hireDecisionsfloat)*100)\n\t\t\t\telse:\n\t\t\t\t\thirePercent \u003d 0\n\t\t\t\t\t\n\t\t\t\t#KPI3 Applicants A Month\n\t\t\t\tMonthCount \u003d 6\n\t\t\t\tnewApplicantsMonthly \u003d []\n\t\t\t\tnow \u003d system.date.now()\n\t\t\t\tfor i in reversed(range(MonthCount)):\n\t\t\t\t\timonthago \u003d system.date.addMonths(now, -i)\n\t\t\t\t\tcmonthago \u003d system.date.addMonths(imonthago, 1)\n\t\t\t\t\tmonth \u003d system.date.getMonth(imonthago) + 1\n\t\t\t\t\tdateMonth \u003d system.date.getMonth(imonthago)\n\t\t\t\t\tdateYear \u003d system.date.getYear(imonthago)\n\t\t\t\t\tdate \u003d system.date.getDate(dateYear, dateMonth, 01)\n\t\t\t\t\tdatetime \u003d system.date.setTime(date, 00, 00, 00)\n\t\t\t\t\tappend_item \u003d {\"time\": system.date.format(datetime, \"M/d/yyyy\") , \"applicants\": 0}\n\t\t\t\t\tresultMonths \u003d 0\n\t\t\t\t\tfor row in range(results.getRowCount()):\n\t\t\t\t\t\tresultMonth \u003d results.getValueAt(row, \"applied_month\")\n\t\t\t\t\t\tif month \u003d\u003d resultMonth:\n\t\t\t\t\t\t\tresultMonths +\u003d 1\n\t\t\t\t\t\t\t\n\t\t\t\t\tappend_item[\"applicants\"] \u003d resultMonths\n\t\t\t\t\tnewApplicantsMonthly.append(append_item)\n\t\t\t\t\t\"\"\"daysBetween \u003d system.date.daysBetween(imonthago, cmonthago)\n\t\t\t\t\tstart \u003d (daysBetween/2)-13\n\t\t\t\t\tend \u003d (daysBetween/2)+13\n\t\t\t\t\tfor i in range(start, end):\n\t\t\t\t\t\tappend_date \u003d {\"time\": system.date.addDays(datetime, i), \"applicants\": resultMonths}\n\t\t\t\t\t\tnewApplicantsMonthly.append(append_date)\n\t\t\t\t\t\"\"\"\n\t\t\t\t\t#newApplicantsMonthly.sort(reverse \u003d True)\n\t\t\t\t\t\"\"\"\n\t\t\t\t\tdef reverseTime(e):\n\t\t\t\t\t\treturn e[\u0027time\u0027]\n\t\t\t\t\t\n\t\t\t\t\tnewApplicantsMonthly.sort(key\u003dreverseTime)\n\t\t\t\t\t\"\"\"\n\t\t\t\t\t#Update Detail KPIs\n\t\t\t\t\tsystem.perspective.sendMessage(\"totalApplicantsDetail\", payload \u003d {\"totalApplicantsDetail\": totalApplicants}, scope \u003d \"session\")\n\t\t\t\t\tsystem.perspective.sendMessage(\"hirePercentDetail\", payload \u003d {\"hirePercentDetail\": hirePercent}, scope \u003d \"session\")\n\t\t\t\t\tsystem.perspective.sendMessage(\"employerApplicantsPerMonth\", payload \u003d {\"newApplicantsMonthly\": newApplicantsMonthly}, scope \u003d \"session\")\n\t\t\t\t\n\t\t\telse:\n\t\t\t\t#Update Detail KPIs\n\t\t\t\tsystem.perspective.sendMessage(\"totalApplicantsDetail\", payload \u003d {\"totalApplicantsDetail\": 0}, scope \u003d \"session\")\n\t\t\t\tsystem.perspective.sendMessage(\"hirePercentDetail\", payload \u003d {\"hirePercentDetail\": 0}, scope \u003d \"session\")\t\n\t\t\t\t\n\t\t\t\n\t\texcept:\n\t\t\tlogger \u003d system.util.getLogger(\"Employer get KPI data failed on Detail ActivityFeed tab onStartUp\")\n\t\t\t#msg \u003d traceback.format_exc()\n\t\t\t#logger.error(msg)\t\n\telse:\n\t\tlogger \u003d system.util.getLogger(\"No Employer ID to get KPI data, failed on Detail ActivityFeed tab onStartUp\")\n\t\t#msg \u003d traceback.format_exc()\n\t\t#logger.error(msg)"
        },
        "enabled": false,
        "scope": "G",
        "type": "script"
      }
    }
  },
  "params": {
    "trackID": 2
  },
  "propConfig": {
    "custom.KPIs": {
      "binding": {
        "config": {
          "struct": {},
          "waitOnAll": true
        },
        "enabled": false,
        "transforms": [
          {
            "code": "\timport datetime\n\tproject \u003d \"RITI\" \n\temployer_id \u003d self.params.trackID\n\tresults \u003d []\n\t## Check if parameters are filled in correctly \n\tif (employer_id is None) or (int(employer_id) \u003c 0):\n\t\tvalid \u003d False\n\t\tsystem.perspective.print(\"Employer ID Error\")\n\telse:\n\t\tvalid \u003d True\n\t\tsystem.perspective.print(\"Data Valid\")\n\t\t\t\n\t### Check if data is valid otherwise show error message.\n\tif valid:\n\t\ttry:\n\t\t\t#Get KPI Info\n\t\t\tpath \u003d \"Employers/Detail/KPI\"\n\t\t\tparameters \u003d {\"employerID\":employer_id}\n\t\t\t#system.perspective.print(\u0027Delete Case Note: \u0027 + str(employer_id))\n\t\t\tresults \u003d system.db.runNamedQuery(project\u003dproject,path\u003dpath,parameters\u003dparameters, getKey\u003dTrue)\t\t\n\n\t\t\tif results is not None:\n\t\t\t\t#KPI1 Applicants\t\t\n\t\t\t\ttotalApplicants \u003d 0\n\t\t\t\thireDecisions \u003d 0\n\t\t\t\thiredApplicants \u003d 0\n\t\t\t\tfor row in range(results.getRowCount()):\n\t\t\t\t\tif results.getValueAt(row, \"applied_state\"):\n\t\t\t\t\t\ttotalApplicants +\u003d 1\n\t\t\t\t\t\t\n\t\t\t\t#KPI1 Hire Percentage\t\t\n\t\t\t\thireDecisions \u003d 0\n\t\t\t\thiredApplicants \u003d 0\n\t\t\t\tfor row in range(results.getRowCount()):\n\t\t\t\t\tif results.getValueAt(row, \"hired_state\") is not None:\n\t\t\t\t\t\thireDecisions +\u003d 1\n\t\t\t\t\t\tif results.getValueAt(row, \"hired_state\"):\n\t\t\t\t\t\t\thiredApplicants +\u003d 1\n\t\t\t\t\t\t\t\n\t\t\t\thiredApplicantsfloat \u003d float(hiredApplicants)\n\t\t\t\thireDecisionsfloat \u003d float(hireDecisions)\n\t\t\t\tif hireDecisionsfloat \u003e 1:\n\t\t\t\t\thirePercent \u003d int((hiredApplicantsfloat/hireDecisionsfloat)*100)\n\t\t\t\telse:\n\t\t\t\t\thirePercent \u003d 0\n\t\t\t\n\t\t\t\t#KPI3 Applicants A Month\n\t\t\t\tMonthCount \u003d 6\n\t\t\t\tnewApplicantsMonthly \u003d []\n\t\t\t\tnow \u003d system.date.now()\n\t\t\t\tfor i in reversed(range(MonthCount)):\n\t\t\t\t\timonthago \u003d system.date.addMonths(now, -i)\n\t\t\t\t\tcmonthago \u003d system.date.addMonths(imonthago, 1)\n\t\t\t\t\tmonth \u003d system.date.getMonth(imonthago) + 1\n\t\t\t\t\tdateMonth \u003d system.date.getMonth(imonthago)\n\t\t\t\t\tdateYear \u003d system.date.getYear(imonthago)\n\t\t\t\t\tdate \u003d system.date.getDate(dateYear, dateMonth, 01)\n\t\t\t\t\tdatetime \u003d system.date.setTime(date, 00, 00, 00)\n\t\t\t\t\tappend_item \u003d {\"time\": system.date.format(datetime, \"M/d/yyyy\") , \"applicants\": 0}\n\t\t\t\t\tresultMonths \u003d 0\n\t\t\t\t\tfor row in range(results.getRowCount()):\n\t\t\t\t\t\tresultMonth \u003d results.getValueAt(row, \"applied_month\")\n\t\t\t\t\t\tif month \u003d\u003d resultMonth:\n\t\t\t\t\t\t\tresultMonths +\u003d 1\n\t\t\t\t\t\t\t\n\t\t\t\t\tappend_item[\"applicants\"] \u003d resultMonths\n\t\t\t\t\tnewApplicantsMonthly.append(append_item)\n\t\t\t\t\t\"\"\"daysBetween \u003d system.date.daysBetween(imonthago, cmonthago)\n\t\t\t\t\tstart \u003d (daysBetween/2)-13\n\t\t\t\t\tend \u003d (daysBetween/2)+13\n\t\t\t\t\tfor i in range(start, end):\n\t\t\t\t\t\tappend_date \u003d {\"time\": system.date.addDays(datetime, i), \"applicants\": resultMonths}\n\t\t\t\t\t\tnewApplicantsMonthly.append(append_date)\n\t\t\t\t\t\"\"\"\n\t\t\t\t\t#newApplicantsMonthly.sort(reverse \u003d True)\n\t\t\t\t\t\"\"\"\n\t\t\t\t\tdef reverseTime(e):\n\t\t\t\t\t\treturn e[\u0027time\u0027]\n\t\t\t\t\t\n\t\t\t\t\tnewApplicantsMonthly.sort(key\u003dreverseTime)\n\t\t\t\t\t\"\"\"\n\t\t\t\t#Update Detail KPIs\n\t\t\t\tsystem.perspective.sendMessage(\"totalApplicantsDetail\", payload \u003d {\"totalApplicantsDetail\": totalApplicants}, scope \u003d \"session\")\n\t\t\t\tsystem.perspective.sendMessage(\"hirePercentDetail\", payload \u003d {\"hirePercentDetail\": hirePercent}, scope \u003d \"session\")\n\t\t\t\tsystem.perspective.sendMessage(\"employerApplicantsPerMonth\", payload \u003d {\"newApplicantsMonthly\": newApplicantsMonthly}, scope \u003d \"session\")\n\t\t\t\t\n\t\t\telse:\n\t\t\t\t#Update Detail KPIs\n\t\t\t\t#system.perspective.sendMessage(\"totalApplicantsDetail\", payload \u003d {\"totalApplicantsDetail\": 0}, scope \u003d \"session\")\n\t\t\t\t#system.perspective.sendMessage(\"hirePercentDetail\", payload \u003d {\"hirePercentDetail\": 0}, scope \u003d \"session\")\t\n\t\t\t\thirePercen \u003d 0\n\t\t\t\n\t\texcept:\n\t\t\tself.getSibling(\"Label\").showMessage(\"Something went wrong while deleting data. Please try again.\")\t\n\telse:\n\t\tself.getSibling(\"Label\").showMessage(\"Something went wrong while saving data. Please try again.\")\n\t\n\treturn newApplicantsMonthly",
            "type": "script"
          }
        ],
        "type": "expr-struct"
      },
      "persistent": true
    },
    "params.trackID": {
      "paramDirection": "input",
      "persistent": true
    }
  },
  "props": {},
  "root": {
    "children": [
      {
        "meta": {
          "name": "FlexRepeater_Activity"
        },
        "position": {
          "grow": 1
        },
        "propConfig": {
          "props.instances": {
            "binding": {
              "config": {
                "parameters": {
                  "providerId": "{view.params.trackID}"
                },
                "queryPath": "Provider/Activities/ActivityFeed",
                "returnFormat": "dataset"
              },
              "transforms": [
                {
                  "code": "\timport traceback\n\ttry:\n\t\t#table_data is the data object to return\n\t\tinstances \u003d []\n\t\t\t\n\t\t#Iterate over the results of the query\n\t\tfor row in range(value.getRowCount()):\n\t\t\tobject \u003d {}\n\t\t\t\n\t\t\t#object[\u0027instanceStyle\u0027] \u003d {\"classes\":\"\"}\n\t\t\t#object[\u0027instancePosition\u0027] \u003d {\"grow\":0, \"shrink\":1,\"basis\":\"50px\"}\n\t\t\tobject[\u0027ID\u0027] \u003d value.getValueAt(row, \"ID\")\n\t\t\tobject[\u0027CardType\u0027] \u003d value.getValueAt(row, \"CardType\")\n\t\t\tobject[\u0027Date\u0027] \u003d system.date.toMillis(value.getValueAt(row, \"Date\"))\n\t\t\tobject[\u0027Size\u0027] \u003d \"\"\n\t\t\tinstances.append(object)\n\t\t\n\t\treturn instances\n\t\n\t\n\texcept:\n\t\tlogger \u003d system.util.getLogger(\"Participants ActivityFeed FlexRepeater_Activity.props.instances\")\n\t\tmsg \u003d traceback.format_exc()\n\t\tlogger.error(msg)",
                  "type": "script"
                }
              ],
              "type": "query"
            }
          }
        },
        "props": {
          "alignContent": "flex-start",
          "direction": "column",
          "elementPosition": {
            "basis": "auto",
            "grow": 0,
            "shrink": 0
          },
          "elementStyle": {
            "classes": "ActivityCards/Card"
          },
          "path": "Providers/Activity/ActivityCard",
          "useDefaultViewWidth": false
        },
        "type": "ia.display.flex-repeater"
      }
    ],
    "meta": {
      "name": "root"
    },
    "props": {
      "direction": "column",
      "style": {
        "classes": "Background/Alternative"
      }
    },
    "type": "ia.container.flex"
  }
}