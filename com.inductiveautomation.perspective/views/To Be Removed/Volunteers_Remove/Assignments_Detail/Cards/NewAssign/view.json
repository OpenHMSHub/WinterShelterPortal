{
  "custom": {
    "function": 0
  },
  "events": {
    "system": {
      "onStartup": {
        "config": {
          "script": "\tself.custom.function \u003d 0\n\tself.params.reservationId \u003d -1"
        },
        "scope": "G",
        "type": "script"
      }
    }
  },
  "params": {
    "assignmentId": -1,
    "reservationId": -1
  },
  "propConfig": {
    "params.assignmentId": {
      "paramDirection": "input",
      "persistent": true
    },
    "params.assignmentId.group": {
      "paramDirection": "input",
      "persistent": true
    },
    "params.assignmentId.job": {
      "paramDirection": "input",
      "persistent": true
    },
    "params.assignmentId.place": {
      "paramDirection": "input",
      "persistent": true
    },
    "params.assignmentId.task": {
      "paramDirection": "input",
      "persistent": true
    },
    "params.assignmentId.timeEnd": {
      "paramDirection": "input",
      "persistent": true
    },
    "params.assignmentId.volunteer": {
      "paramDirection": "input",
      "persistent": true
    }
  },
  "props": {
    "defaultSize": {
      "height": 220
    },
    "loading": {
      "mode": "blocking"
    }
  },
  "root": {
    "children": [
      {
        "meta": {
          "name": "EmbeddedView Header"
        },
        "position": {
          "basis": "25px",
          "shrink": 0
        },
        "props": {
          "params": {
            "Text": "Assign Volunteer or Group"
          },
          "path": "Shelter/Reservation/Cards/New Reservation/ReservationHeader"
        },
        "type": "ia.display.view"
      },
      {
        "meta": {
          "name": "EmbeddedViewAssignment"
        },
        "position": {
          "basis": "65px",
          "shrink": 0
        },
        "propConfig": {
          "props.params.endDate": {
            "binding": {
              "config": {
                "expression": "if(isnull({parent.custom.assignment.timeEnd}),\r\n\tnow(0),\r\n\tfromMillis({parent.custom.assignment.timeEnd}))\r\n\r\n\r\n"
              },
              "type": "expr"
            }
          },
          "props.params.job": {
            "binding": {
              "config": {
                "path": "parent.custom.assignment.volunteerJobName"
              },
              "type": "property"
            }
          },
          "props.params.place": {
            "binding": {
              "config": {
                "path": "parent.custom.assignment.placeName"
              },
              "type": "property"
            }
          },
          "props.params.startDate": {
            "binding": {
              "config": {
                "expression": "if(isnull({parent.custom.assignment.timeStart}),\r\n\tnow(0),\r\n\tfromMillis({parent.custom.assignment.timeStart}))\r\n\r\n\r\n"
              },
              "type": "expr"
            }
          },
          "props.params.task": {
            "binding": {
              "config": {
                "path": "parent.custom.assignment.volunteerTaskName"
              },
              "type": "property"
            }
          }
        },
        "props": {
          "path": "Volunteers/Assignments_Detail/Cards/Assign/AssignmentInfo",
          "style": {
            "marginLeft": "10px",
            "marginRight": "10px"
          }
        },
        "type": "ia.display.view"
      },
      {
        "meta": {
          "name": "EmbeddedViewVolunteer"
        },
        "position": {
          "basis": "60px"
        },
        "propConfig": {
          "props.params.groupId": {
            "binding": {
              "config": {
                "bidirectional": true,
                "path": "parent.custom.assignment.volunteerGroupId"
              },
              "type": "property"
            },
            "onChange": {
              "enabled": null,
              "script": "\tif currentValue.value:\n\t\tself.props.params.volunteerId \u003d None"
            }
          },
          "props.params.volunteerId": {
            "binding": {
              "config": {
                "bidirectional": true,
                "path": "parent.custom.assignment.volunteerId"
              },
              "type": "property"
            },
            "onChange": {
              "enabled": null,
              "script": "\tif currentValue.value:\n\t\tself.props.params.groupId \u003d None\n\t"
            }
          }
        },
        "props": {
          "path": "Volunteers/Assignments_Detail/Cards/Assign/Volunteer",
          "style": {
            "marginLeft": "17px",
            "marginRight": "10px"
          }
        },
        "type": "ia.display.view"
      },
      {
        "children": [
          {
            "events": {
              "component": {
                "onActionPerformed": {
                  "config": {
                    "script": "\tid \u003d self.view.getChild(\"root\").custom.assignment.id\n\tif id:\n\t\tvolunteerId \u003d self.view.getChild(\"root\").custom.assignment.volunteerId\n\t\tvolunteerGroupId \u003d self.view.getChild(\"root\").custom.assignment.volunteerGroupId\n\t\tpath \u003d \"Volunteers/Assignments/AssignmentAddVolunteer\"\n\t\tparameters \u003d {\n\t\t\t\"id\": id,\n\t\t\t\"volunteerId\": volunteerId,\n\t\t\t\"volunteerGroupId\": volunteerGroupId\n\t\t}\n#\t\ttry:\n\t\tsystem.db.runNamedQuery(path\u003dpath,parameters\u003dparameters)\n\t\tsystem.perspective.sendMessage(\"refresh-assign-table\", {}, scope\u003d\"session\")\n\t\tself.view.params.assignmentId \u003d -1\n#\t\texcept:\n#\t\t\tself.getSibling(\"Label\").showMessage(\"Error while saving assignment. Please try again.\")\n\t\n\t\t \t"
                  },
                  "scope": "G",
                  "type": "script"
                }
              }
            },
            "meta": {
              "name": "Button_0"
            },
            "position": {
              "basis": "100px"
            },
            "propConfig": {
              "position.display": {
                "binding": {
                  "config": {
                    "path": "view.params.assignmentId"
                  },
                  "transforms": [
                    {
                      "code": "\tif value \u003d\u003d -1:\n\t\treturn False\n\telse:\n\t\treturn True",
                      "type": "script"
                    }
                  ],
                  "type": "property"
                }
              }
            },
            "props": {
              "style": {
                "classes": "Buttons/Main",
                "marginBottom": "5px",
                "marginLeft": "10px",
                "marginTop": "5px"
              },
              "text": "ASSIGN"
            },
            "type": "ia.input.button"
          },
          {
            "events": {
              "component": {
                "onActionPerformed": {
                  "config": {
                    "script": "\ttry:\n\t\tsystem.perspective.print(\"In delete .... for reservation \" + str( self.view.params.reservationId))\n\t\tproject \u003d \u0027RITI\u0027\n\t\tpath \u003d \"Shelter/Reservations/DeleteReservation\"\n\t\tparameters \u003d {\"reservationId\": int(self.view.params.reservationId)}\n\t\tsystem.db.runNamedQuery(project\u003dproject,path\u003dpath,parameters\u003dparameters)\t\t\n\t\tself.view.params.reservationId  \u003d -1\n\t\t\n\t\tself.parent.parent.getChild(\"EmbeddedView Note\").props.params.CaseNote \u003d \u0027\u0027\n\t\tself.parent.parent.getChild(\"EmbeddedView Dates Input\").props.params.beginDate \u003d system.date.now()\n\t\tself.parent.parent.getChild(\"EmbeddedView Dates Input\").props.params.endDate \u003d system.date.now()\n\t\tsystem.perspective.sendMessage(\"reservationselected\",payload \u003d {\u0027facilityId\u0027:-1,\u0027reservationId\u0027:-1, \u0027bedId\u0027:-1, \u0027participantId\u0027:-1, \u0027roomId\u0027:-1},scope\u003d\u0027session\u0027)\n\t\t\n\t\tsystem.perspective.sendMessage(messageType\u003d\"refreshReservations\", payload\u003d{}, scope\u003d\"session\")\t\n\texcept:\n\t\tself.getSibling(\"Label\").showMessage(\"Something went wrong while deleting data. Please select \u0026 try again.\")"
                  },
                  "scope": "G",
                  "type": "script"
                }
              }
            },
            "meta": {
              "name": "Button_1"
            },
            "position": {
              "basis": "100px",
              "display": false
            },
            "props": {
              "style": {
                "classes": "Buttons/Delete",
                "marginBottom": "5px",
                "marginLeft": "10px",
                "marginTop": "5px"
              },
              "text": "Delete"
            },
            "type": "ia.input.button"
          },
          {
            "meta": {
              "name": "Label",
              "visible": false
            },
            "position": {
              "basis": "50px",
              "grow": 1
            },
            "props": {
              "style": {
                "classes": "Text/Error_Message"
              },
              "text": "Please fill in all the fields correctly before saving."
            },
            "scripts": {
              "customMethods": [
                {
                  "name": "showMessage",
                  "params": [
                    "message"
                  ],
                  "script": "\timport time\n\tself.props.text \u003d message\n\tself.meta.visible \u003d True\n\ttime.sleep(5)\n\tself.meta.visible \u003d False\n\t"
                }
              ],
              "extensionFunctions": null,
              "messageHandlers": []
            },
            "type": "ia.display.label"
          },
          {
            "events": {
              "component": {
                "onActionPerformed": {
                  "config": {
                    "script": "\tself.view.params.assignmentId \u003d -1"
                  },
                  "scope": "G",
                  "type": "script"
                }
              }
            },
            "meta": {
              "name": "Button_2"
            },
            "position": {
              "basis": "100px"
            },
            "propConfig": {
              "position.display": {
                "binding": {
                  "config": {
                    "path": "view.params.assignmentId"
                  },
                  "transforms": [
                    {
                      "code": "\tif value \u003d\u003d -1:\n\t\treturn False\n\telse:\n\t\treturn True",
                      "type": "script"
                    }
                  ],
                  "type": "property"
                }
              }
            },
            "props": {
              "style": {
                "classes": "Buttons/Btn_Teal_Shelter",
                "marginBottom": "5px",
                "marginLeft": "10px",
                "marginRight": "10px",
                "marginTop": "5px"
              },
              "text": "Clear"
            },
            "type": "ia.input.button"
          }
        ],
        "custom": {
          "ReservationSaved": false
        },
        "meta": {
          "name": "root Actions"
        },
        "position": {
          "basis": "51px",
          "shrink": 0
        },
        "props": {
          "style": {
            "borderTopColor": "#9db8d1",
            "borderTopStyle": "solid",
            "borderTopWidth": "1px",
            "classes": "Background/Default",
            "marginLeft": "10px",
            "marginRight": "10px",
            "marginTop": "5px",
            "paddingTop": "5px"
          }
        },
        "type": "ia.container.flex"
      }
    ],
    "meta": {
      "name": "root"
    },
    "propConfig": {
      "custom.assignment": {
        "binding": {
          "config": {
            "parameters": {
              "id": "{view.params.assignmentId}"
            },
            "queryPath": "Volunteers/Assignments/AssignmnetAssign",
            "returnFormat": "json"
          },
          "transforms": [
            {
              "code": "\tif len(value) \u003e 0:\n\t\tvalue \u003d value[0]\n\telse:\n\t\tvalue \u003d {\n\t\t\t\"placeName\": \"\",\n\t\t\t\"volunteerJobName\":\"\",\n\t\t\t\"volunteerTaskName\":\"\",\n\t\t\t\"startDate\":system.date.toMillis(system.date.now()),\n\t\t\t\"endDate\":system.date.toMillis(system.date.now()),\n\t\t\t\"id\": False\n\t\t}\n\treturn value",
              "type": "script"
            }
          ],
          "type": "query"
        }
      },
      "custom.selectedGroupId": {
        "binding": {
          "config": {
            "path": "./EmbeddedViewVolunteer.props.params.groupId"
          },
          "type": "property"
        }
      },
      "custom.selectedVolunteerId": {
        "binding": {
          "config": {
            "path": "./EmbeddedViewVolunteer.props.params.volunteerId"
          },
          "type": "property"
        }
      }
    },
    "props": {
      "direction": "column",
      "style": {
        "classes": "Background/Default"
      }
    },
    "scripts": {
      "customMethods": [],
      "extensionFunctions": null,
      "messageHandlers": [
        {
          "messageType": "reservationselected",
          "pageScope": false,
          "script": "\t# implement your handler here\n\tself.view.params.reservationId \u003d payload[\u0027reservationId\u0027]\n\tself.getChild(\"EmbeddedView Note\").props.params.CaseNote \u003d payload[\u0027notes\u0027]\n\tself.getChild(\"EmbeddedView Dates Input\").props.params.beginDate \u003d payload[\u0027checkInDate\u0027]\n\tself.getChild(\"EmbeddedView Dates Input\").props.params.endDate \u003d payload[\u0027checkOutDate\u0027]",
          "sessionScope": true,
          "viewScope": false
        }
      ]
    },
    "type": "ia.container.flex"
  }
}