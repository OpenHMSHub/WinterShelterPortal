{
  "custom": {
    "searchPayload": "value"
  },
  "events": {
    "system": {
      "onStartup": {
        "config": {
          "script": "\t\n\tself.session.custom.isClearFilter \u003d False\n\t#Shelter\n#\tresult \u003d system.db.runNamedQuery(\"Shelter/Filter/getShelters\", {})\t\t\t\t\t\n#\tvalue \u003d system.dataset.toPyDataSet(result)\n#\treturnValue \u003d \"\"\n#\ti \u003d 0\n#\tif ( value !\u003d -1 or value is not None):\n#\t\tfor row in value:\n#\t\t\tif i \u003d\u003d 0:\n#\t\t\t\treturnValue \u003d returnValue + \",\" + str(row[i]).lstrip(\u0027\"\u0027).rstrip(\u0027\"\u0027)\n#\t\t\telse:\n#\t\t\t\treturnValue \u003d returnValue + \",\" + str(row[i]).lstrip(\u0027\"\u0027).rstrip(\u0027\"\u0027)\n#\t\t\t\ti \u003d i + 1\n#\t\t\t\n#\treturnValue \u003d returnValue.lstrip(\u0027,\u0027)\t\n#\t#returnValue \u003d returnValue.replace(\u0027\\\u0027\u0027,\u0027\\\"\u0027)\t\n#\treturnValue \u003d \"(\" + returnValue + \")\"\n#\tsystem.perspective.print(\"on view load\")\n#\tsystem.perspective.print(returnValue)\t\n\tself.getChild(\"root\").getChild(\"shelter\").props.params.selectedValues \u003d -1 \n\n#\t#Gender\n#\treturnValue \u003d \"(Male,Female,Other)\"\n#\tsystem.perspective.print(returnValue)\n\tself.getChild(\"root\").getChild(\"gender\").props.params.selectedValues \u003d -1\t\n\n#\t#Race\n#\treturnValue \u003d \"(White,Hispanic or Latino,Not Hispanic or Latino)\"\n#\tsystem.perspective.print(returnValue)\n\tself.getChild(\"root\").getChild(\"race\").props.params.selectedValues \u003d -1\t\n\n\tself.getChild(\"root\").getChild(\"age\").props.params.selectedValues \u003d -1\t\n\t\n\tself.session.custom.dateRangeFromDate \u003d system.date.format(system.date.getDate(system.date.getYear(system.date.now()), 0, 1), \u0027MM/dd/yyyy\u0027)\n\tself.session.custom.dateRangeToDate \u003d system.date.format(system.date.now(),\u0027MM/dd/yyyy\u0027)\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"
        },
        "enabled": false,
        "scope": "G",
        "type": "script"
      }
    }
  },
  "params": {
    "age": -1,
    "endDateTime": "05/17/2021",
    "startDateTime": "05/17/2021"
  },
  "propConfig": {
    "custom.searchPayload": {
      "persistent": true
    },
    "params.age": {
      "binding": {
        "config": {
          "path": "/root/age.props.params.selectedValues"
        },
        "transforms": [
          {
            "code": "\t#\tvalue \u003d value[1:(len(value) - 1)]\n#\tvalue \u003d value.lstrip(\u0027[\"\u0027)\n#\tvalue \u003d value.rstrip(\u0027\"]\u0027)\n#\tvalue \u003d value.replace(\u0027\\\"\u0027,\"\")\n#\t#value \u003d value.replace(\u0027\\\u0027\u0027,\u0027\\\"\u0027)\n#\tnewValue \u003d \u0027 \u0027.join(\"\u0027{}\u0027,\".format(word.strip()) for word in value.split(\u0027,\u0027))\n#\tnewValue \u003d \"(\" + newValue[0:(len(newValue) - 1)] + \")\"\n#\t#print (\"Output binding\")\n#\t#print newValue\n#\treturn newValue\n\treturn value",
            "type": "script"
          }
        ],
        "type": "property"
      },
      "paramDirection": "inout",
      "persistent": true
    },
    "params.endDateTime": {
      "binding": {
        "config": {
          "path": "session.custom.dateRangeToDate"
        },
        "type": "property"
      },
      "paramDirection": "inout",
      "persistent": true
    },
    "params.gender": {
      "binding": {
        "config": {
          "path": "/root/gender.props.params.selectedValues"
        },
        "transforms": [
          {
            "code": "\t#\tvalue \u003d value[1:(len(value) - 1)]\n#\tvalue \u003d value.lstrip(\u0027[\"\u0027)\n#\tvalue \u003d value.rstrip(\u0027\"]\u0027)\n#\tvalue \u003d value.replace(\u0027\\\"\u0027,\"\")\n#\t#value \u003d value.replace(\u0027\\\u0027\u0027,\u0027\\\"\u0027)\n#\tnewValue \u003d \u0027 \u0027.join(\"\u0027{}\u0027,\".format(word.strip()) for word in value.split(\u0027,\u0027))\n#\tnewValue \u003d \"(\" + newValue[0:(len(newValue) - 1)] + \")\"\n#\t#print (\"Output binding\")\n#\t#print newValue\n#\treturn newValue\n\treturn value",
            "type": "script"
          }
        ],
        "type": "property"
      },
      "paramDirection": "inout"
    },
    "params.race": {
      "binding": {
        "config": {
          "path": "/root/race.props.params.selectedValues"
        },
        "transforms": [
          {
            "code": "\t#\tvalue \u003d value[1:(len(value) - 1)]\n#\tvalue \u003d value.lstrip(\u0027[\"\u0027)\n#\tvalue \u003d value.rstrip(\u0027\"]\u0027)\n#\tvalue \u003d value.replace(\u0027\\\"\u0027,\"\")\n#\t#value \u003d value.replace(\u0027\\\u0027\u0027,\u0027\\\"\u0027)\n#\tnewValue \u003d \u0027 \u0027.join(\"\u0027{}\u0027,\".format(word.strip()) for word in value.split(\u0027,\u0027))\n#\tnewValue \u003d \"(\" + newValue[0:(len(newValue) - 1)] + \")\"\n#\t#print (\"Output binding\")\n#\t#print newValue\n#\treturn newValue\n\treturn value",
            "type": "script"
          }
        ],
        "type": "property"
      },
      "paramDirection": "inout"
    },
    "params.shelter": {
      "binding": {
        "config": {
          "path": "/root/shelter.props.params.selectedValues"
        },
        "transforms": [
          {
            "code": "#\tvalue \u003d value[1:(len(value) - 1)]\n#\tvalue \u003d value.lstrip(\u0027[\"\u0027)\n#\tvalue \u003d value.rstrip(\u0027\"]\u0027)\n#\tvalue \u003d value.replace(\u0027\\\"\u0027,\"\")\n#\t#value \u003d value.replace(\u0027\\\u0027\u0027,\u0027\\\"\u0027)\n#\tnewValue \u003d \u0027 \u0027.join(\"\u0027{}\u0027,\".format(word.strip()) for word in value.split(\u0027,\u0027))\n#\tnewValue \u003d \"(\" + newValue[0:(len(newValue) - 1)] + \")\"\n#\t#print (\"Output binding\")\n#\t#print newValue\n#\treturn newValue\n\treturn value",
            "type": "script"
          }
        ],
        "type": "property"
      },
      "paramDirection": "inout"
    },
    "params.startDateTime": {
      "binding": {
        "config": {
          "path": "session.custom.dateRangeFromDate"
        },
        "type": "property"
      },
      "paramDirection": "inout",
      "persistent": true
    }
  },
  "props": {
    "defaultSize": {
      "height": 52
    }
  },
  "root": {
    "children": [
      {
        "meta": {
          "name": "Label"
        },
        "position": {
          "basis": "10%",
          "shrink": 0
        },
        "props": {
          "style": {
            "classes": "Table/Filter_Header_Detail",
            "paddingLeft": "40px"
          },
          "text": "Filter by:"
        },
        "type": "ia.display.label"
      },
      {
        "meta": {
          "name": "gender"
        },
        "position": {
          "basis": "12%"
        },
        "props": {
          "params": {
            "filterData": [
              {
                "label": "Male",
                "value": "Male"
              },
              {
                "label": "Female",
                "value": "Female"
              },
              {
                "label": "Other",
                "value": "Other"
              }
            ],
            "filterName": "Gender",
            "selectedValues": -1
          },
          "path": "Shelter/Templates/MultiselectFilter",
          "style": {
            "marginBottom": 8,
            "marginLeft": 5,
            "marginRight": 5,
            "marginTop": 8
          }
        },
        "type": "ia.display.view"
      },
      {
        "meta": {
          "name": "race"
        },
        "position": {
          "basis": "12%"
        },
        "props": {
          "params": {
            "filterData": [
              {
                "label": "White",
                "value": "White"
              },
              {
                "label": "Hispanic or Latino",
                "value": "Hispanic or Latino"
              },
              {
                "label": "Not Hispanic or Latino",
                "value": "Not Hispanic or Latino"
              }
            ],
            "filterName": "Race",
            "selectedValues": -1
          },
          "path": "Shelter/Templates/MultiselectFilter",
          "style": {
            "marginBottom": 8,
            "marginLeft": 5,
            "marginRight": 5,
            "marginTop": 8
          }
        },
        "type": "ia.display.view"
      },
      {
        "meta": {
          "name": "age"
        },
        "position": {
          "basis": "12%"
        },
        "props": {
          "params": {
            "filterData": [
              {
                "label": "\u003c18",
                "value": "\u003c18"
              },
              {
                "label": "18-24",
                "value": "18-24"
              },
              {
                "label": "25-34",
                "value": "25-34"
              },
              {
                "label": "35-44",
                "value": "35-44"
              },
              {
                "label": "45-55",
                "value": "45-55"
              },
              {
                "label": "\u003e55",
                "value": "\u003e55"
              }
            ],
            "filterName": "Age",
            "selectedValues": -1
          },
          "path": "Shelter/Templates/MultiselectFilter",
          "style": {
            "marginBottom": 8,
            "marginLeft": 5,
            "marginRight": 5,
            "marginTop": 8
          }
        },
        "type": "ia.display.view"
      },
      {
        "meta": {
          "name": "shelter"
        },
        "position": {
          "basis": "12%"
        },
        "propConfig": {
          "props.params.filterData": {
            "binding": {
              "config": {
                "queryPath": "Shelter/Filter/getShelters"
              },
              "transforms": [
                {
                  "code": "\tlist \u003d []\n\toneValue \u003d {}\n\tfor i in range (value.getRowCount()):\n\t\t\t\toneValue \u003d {}\n\t\t\t\toneValue[\u0027label\u0027] \u003d value.getValueAt(i,0)\n\t\t\t\toneValue[\u0027value\u0027] \u003d value.getValueAt(i,0)\n\t\t\t\tlist.append(oneValue)\n\treturn list",
                  "type": "script"
                }
              ],
              "type": "query"
            }
          }
        },
        "props": {
          "params": {
            "filterName": "Shelter",
            "selectedValues": -1
          },
          "path": "Shelter/Templates/MultiselectFilter",
          "style": {
            "marginBottom": 8,
            "marginLeft": 5,
            "marginRight": 5,
            "marginTop": 8
          }
        },
        "type": "ia.display.view"
      },
      {
        "events": {
          "dom": {
            "onClick": {
              "config": {
                "script": "\t\n\tself.getSibling(\"shelter\").props.params.selectedValues \u003d -1\n\n\tself.getSibling(\"gender\").props.params.selectedValues \u003d -1\t\n\t\t\n\tself.getSibling(\"race\").props.params.selectedValues \u003d -1\n\t\n\tself.getSibling(\"age\").props.params.selectedValues \u003d -1\t\t\t\t\n\n\tself.session.custom.isClearFilter \u003d True\n\t\n\tself.session.custom.dateRangeFromDate \u003d system.date.format(system.date.getDate(system.date.getYear(system.date.now()), 0, 1), \u0027MM/dd/yyyy\u0027)\n\tself.session.custom.dateRangeToDate \u003d system.date.format(system.date.now(),\u0027MM/dd/yyyy\u0027)"
              },
              "scope": "G",
              "type": "script"
            }
          }
        },
        "meta": {
          "name": "clearFilters"
        },
        "position": {
          "basis": "2%"
        },
        "props": {
          "image": {
            "icon": {
              "path": "material/close"
            },
            "style": {
              "backgroundColor": "#181818"
            }
          },
          "style": {
            "backgroundColor": "#0C4E8B",
            "borderBottomLeftRadius": 5,
            "borderBottomRightRadius": 5,
            "borderColor": "#4D4D4D",
            "borderStyle": "solid",
            "borderTopLeftRadius": 5,
            "borderTopRightRadius": 5,
            "borderWidth": 1,
            "margin": 8
          },
          "text": "",
          "textStyle": {
            "classes": "GreyColor"
          }
        },
        "type": "ia.input.button"
      },
      {
        "meta": {
          "name": "filler"
        },
        "position": {
          "basis": "10%"
        },
        "props": {
          "style": {
            "classes": "Table/Filter_Header_Detail",
            "paddingLeft": "40px"
          }
        },
        "type": "ia.display.label"
      },
      {
        "meta": {
          "name": "dateRange"
        },
        "position": {
          "basis": "18%"
        },
        "props": {
          "path": "Shelter/Templates/DateRange/DateInput",
          "style": {
            "marginBottom": 8,
            "marginLeft": 5,
            "marginRight": 5,
            "marginTop": 8
          }
        },
        "type": "ia.display.view"
      },
      {
        "meta": {
          "name": "searchBar"
        },
        "position": {
          "basis": "12%"
        },
        "props": {
          "path": "Shelter/Templates/Search_Bar",
          "style": {
            "marginBottom": 7,
            "marginLeft": 5,
            "marginRight": 5,
            "marginTop": 7
          }
        },
        "type": "ia.display.view"
      }
    ],
    "meta": {
      "name": "root"
    },
    "props": {
      "style": {
        "classes": "Table/Filter_Header"
      }
    },
    "type": "ia.container.flex"
  }
}