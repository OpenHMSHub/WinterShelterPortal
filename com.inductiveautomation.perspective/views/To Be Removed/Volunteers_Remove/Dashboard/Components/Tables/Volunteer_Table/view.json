{
  "custom": {},
  "params": {
    "EventDate": {
      "$": [
        "ts",
        192,
        1615906444648
      ],
      "$ts": 1615990444000
    },
    "Events": [],
    "Gender": "",
    "dayRange": 365,
    "exportDataset": [
      {
        "Check-In": {
          "$": [
            "ts",
            192,
            1651601817080
          ],
          "$ts": 1648498635000
        },
        "Check-Out": {
          "$": [
            "ts",
            192,
            1651601817080
          ],
          "$ts": 1648502235000
        },
        "EventDate": {
          "$": [
            "ts",
            192,
            1651601817080
          ],
          "$ts": 1648076400000
        },
        "EventName": "Volunteer Orientation",
        "Gender": "Data not collected",
        "Hours": 1,
        "Name": {
          "style": {
            "color": "#0c4e85",
            "fontFamily": "Proxima Nova ExCn Medium",
            "text-align": "left"
          },
          "value": "Katie  Algers"
        },
        "id": "2543"
      },
      {
        "Check-In": {
          "$": [
            "ts",
            192,
            1651601817080
          ],
          "$ts": 1648832400000
        },
        "Check-Out": {
          "$": [
            "ts",
            192,
            1651601817080
          ],
          "$ts": 1648836000000
        },
        "EventDate": {
          "$": [
            "ts",
            192,
            1651601817080
          ],
          "$ts": 1649221200000
        },
        "EventName": "Day Services",
        "Gender": "Data not collected",
        "Hours": 1,
        "Name": {
          "style": {
            "color": "#0c4e85",
            "fontFamily": "Proxima Nova ExCn Medium",
            "text-align": "left"
          },
          "value": "Katie  Algers"
        },
        "id": "2543"
      },
      {
        "Check-In": {
          "$": [
            "ts",
            192,
            1651601817080
          ],
          "$ts": 1649250000000
        },
        "Check-Out": {
          "$": [
            "ts",
            192,
            1651601817080
          ],
          "$ts": 1649268000000
        },
        "EventDate": {
          "$": [
            "ts",
            192,
            1651601817080
          ],
          "$ts": 1648832400000
        },
        "EventName": "Recovery",
        "Gender": "Data not collected",
        "Hours": 5,
        "Name": {
          "style": {
            "color": "#0c4e85",
            "fontFamily": "Proxima Nova ExCn Medium",
            "text-align": "left"
          },
          "value": "Katie  Algers"
        },
        "id": "2543"
      },
      {
        "Check-In": {
          "$": [
            "ts",
            192,
            1651601817080
          ],
          "$ts": 1649250000000
        },
        "Check-Out": {
          "$": [
            "ts",
            192,
            1651601817080
          ],
          "$ts": 1649268000000
        },
        "EventDate": {
          "$": [
            "ts",
            192,
            1651601817080
          ],
          "$ts": 1648832400000
        },
        "EventName": "Recovery",
        "Gender": "Data not collected",
        "Hours": 5,
        "Name": {
          "style": {
            "color": "#0c4e85",
            "fontFamily": "Proxima Nova ExCn Medium",
            "text-align": "left"
          },
          "value": "Halima  Ali"
        },
        "id": "2544"
      }
    ],
    "searchText": "ka"
  },
  "propConfig": {
    "params.EventDate": {
      "onChange": {
        "enabled": null,
        "script": "\t#get current dataset\n\tself.getChild(\"root\").getChild(\"Table\").FilterTable()"
      },
      "paramDirection": "input",
      "persistent": true
    },
    "params.Events": {
      "onChange": {
        "enabled": null,
        "script": "\tself.getChild(\"root\").getChild(\"Table\").FilterTable()"
      },
      "paramDirection": "input",
      "persistent": true
    },
    "params.Gender": {
      "onChange": {
        "enabled": null,
        "script": "\tself.getChild(\"root\").getChild(\"Table\").FilterTable()"
      },
      "paramDirection": "input",
      "persistent": true
    },
    "params.dayRange": {
      "paramDirection": "input",
      "persistent": true
    },
    "params.exportDataset": {
      "binding": {
        "config": {
          "path": "/root/Table.props.data"
        },
        "type": "property"
      },
      "paramDirection": "output",
      "persistent": true
    },
    "params.searchText": {
      "onChange": {
        "enabled": null,
        "script": "\t\n#\tdataset \u003d self.getChild(\"root\").getChild(\"Table\").custom.sqlData\n#\theaders \u003d headers \u003d [\"Name\", \"Phone Number\", \"Email\", \"dob\", \"id\", \"gender\", \"nextServiceDate\", \"nextAssignment\", \"lastServiceDate\", \"lastAssignment\", \"hoursPastSixMonths\"]\n#\tfilteredDataset \u003d dataset\n#\t\n#\tif self.params.hoursPast6Months !\u003d None and self.params.hoursPast6Months:\n#\t\t\tfilter \u003d self.params.hoursPast6Months\n#\t\t\t\n#\t\t\t# get rows\n#\t\t\treturnDataset \u003d []\n#\t\t\tfor i in range(filteredDataset.getRowCount()) :\n#\t\t\t\toneRow \u003d []\n#\t\t\t\tcell \u003d filteredDataset.getValueAt(i,\"hoursPastSixMonths\")\n#\t\t\t\t\n#\t\t\t\tif cell !\u003d None:\t\t\t\t\n#\t\t\t\t\t#check if row matches condition \u0026 add row to filtered set.\n#\t\t\t\t\tfor condition in filter :\n#\t\t\t\t\t\tif cell \u003e\u003d condition[\u0027min\u0027] and cell \u003c\u003d condition[\u0027max\u0027] :\t\t\t\t \n#\t\t\t\t\t\t\t for x in range(filteredDataset.getColumnCount()) :\n#\t\t\t\t\t\t\t \toneRow.append(filteredDataset.getValueAt(i,x))\n#\t\t\t\t\t\t\t returnDataset.append(oneRow)\n#\t\t\t\t\t\t\t break\t\t\t\n#\t\t\tfilteredDataset \u003d system.dataset.toDataSet(headers, returnDataset)\n#\t\t\t\n#\t\n#\tfromDate \u003d self.params.lastServiceStartDate\n#\ttoDate \u003d self.params.lastServiceEndDate\n#\t\n#\tif fromDate and toDate:\t\n#\t\treturnDataset \u003d []\n#\t\tfor i in range (filteredDataset.getRowCount()):\n#\t\t\toneRow \u003d[]\n#\t\t\tcolDate \u003d filteredDataset.getValueAt(i,\"lastServiceDate\")\n#\t\t\tif colDate !\u003d None:\n#\t\t\t\tcolDate \u003d system.date.setTime(colDate, 0, 0, 0)\n#\t\t\t\tparseFrom \u003d system.date.setTime(fromDate,0,0,0)\n#\t\t\t\tparseTo \u003d system.date.setTime(toDate,0,0,0)\n#\t\t\t\t\n#\t\t\t\tif system.date.isBetween(colDate,parseFrom,parseTo):\n#\t\t\t\t\t#oneRow \u003d [filteredDataset.getValueAt(i,0),filteredDataset.getValueAt(i,1),filteredDataset.getValueAt(i,2),filteredDataset.getValueAt(i,3),filteredDataset.getValueAt(i,4),filteredDataset.getValueAt(i,5),filteredDataset.getValueAt(i,6),filteredDataset.getValueAt(i,7),filteredDataset.getValueAt(i,8),filteredDataset.getValueAt(i,9)]\n#\t\t\t\t\tfor x in range(filteredDataset.getColumnCount()) : \n#\t\t\t\t\t\toneRow.append(filteredDataset.getValueAt(i,x))\t\t\t\n#\t\t\t\t\treturnDataset.append(oneRow)\n#\n#\t\tfilteredDataset \u003d system.dataset.toDataSet(headers, returnDataset)\n#\t\n#\t\n#\t\n#\tsearcthText \u003d self.params.searchText\n#\t\n#\treturnDataset \u003d []\n#\tif searcthText !\u003d \"\":\n#\t\tfor i in range (filteredDataset.getRowCount()):\n#\t\t\tfor j in [7,9]:\n#\t\t\t\toneRow \u003d []\n#\t\t\t\tcellValue \u003d filteredDataset.getValueAt(i,j)\n#\t\t\t\tif cellValue!\u003dNone:\n#\t\t\t\t\tif str(cellValue).lower().find(searcthText) !\u003d -1 :\n#\t\t\t\t\t\t#oneRow \u003d [originaldataset.getValueAt(i,0),originaldataset.getValueAt(i,1),originaldataset.getValueAt(i,2),originaldataset.getValueAt(i,3),originaldataset.getValueAt(i,4),originaldataset.getValueAt(i,5),originaldataset.getValueAt(i,6),originaldataset.getValueAt(i,7),originaldataset.getValueAt(i,8),originaldataset.getValueAt(i,9),originaldataset.getValueAt(i,10),originaldataset.getValueAt(i,11)]\n#\t\t\t\t\t#\tfor x in range(originaldataset.getColumnCount()):\n#\t\t\t\t\t\t#\toneRow.append(originaldataset.getValueAt(i,x))\n#\t\t\t\t\t\toneRow \u003d [filteredDataset.getValueAt(i,x) for x in range(filteredDataset.getColumnCount())]\n#\t\t\t\t\t\treturnDataset.append(oneRow)\n#\t\t\t\t\t\tbreak\n#\t\tfilteredDataset \u003d system.dataset.toDataSet(headers, returnDataset)\n#\n#\tself.getChild(\"root\").getChild(\"Table\").custom.filteredData \u003d filteredDataset\n\n\n\tself.getChild(\"root\").getChild(\"Table\").FilterTable()"
      },
      "paramDirection": "input",
      "persistent": true
    }
  },
  "props": {
    "defaultSize": {
      "height": 620,
      "width": 873
    }
  },
  "root": {
    "children": [
      {
        "custom": {
          "DockID": "33",
          "sqlData": {
            "$": [
              "ds",
              192,
              1651601642920
            ],
            "$columns": [
              {
                "data": [
                  "Katie  Algers",
                  "Katie  Algers",
                  "Katie  Algers",
                  "Halima  Ali"
                ],
                "name": "Name",
                "type": "String"
              },
              {
                "data": [
                  null,
                  null,
                  null,
                  null
                ],
                "name": "Phone Number",
                "type": "String"
              },
              {
                "data": [
                  null,
                  null,
                  null,
                  "halima.ali@kippnash.org"
                ],
                "name": "Email",
                "type": "String"
              },
              {
                "data": [
                  null,
                  null,
                  null,
                  960354000000
                ],
                "name": "dob",
                "type": "Date"
              },
              {
                "data": [
                  "Volunteer Orientation",
                  "Day Services",
                  "Recovery",
                  "Recovery"
                ],
                "name": "EventName",
                "type": "String"
              },
              {
                "data": [
                  1648076400000,
                  1649221200000,
                  1648832400000,
                  1648832400000
                ],
                "name": "EventDate",
                "type": "Date"
              },
              {
                "data": [
                  2543,
                  2543,
                  2543,
                  2544
                ],
                "name": "id",
                "type": "Integer"
              },
              {
                "data": [
                  1648498635000,
                  1648832400000,
                  1649250000000,
                  1649250000000
                ],
                "name": "checkin",
                "type": "Date"
              },
              {
                "data": [
                  1648502235000,
                  1648836000000,
                  1649268000000,
                  1649268000000
                ],
                "name": "checkout",
                "type": "Date"
              },
              {
                "data": [
                  1,
                  1,
                  5,
                  5
                ],
                "name": "Hours",
                "type": "Double"
              },
              {
                "data": [
                  "Data not collected",
                  "Data not collected",
                  "Data not collected",
                  "Data not collected"
                ],
                "name": "Gender",
                "type": "String"
              }
            ]
          }
        },
        "meta": {
          "name": "Table"
        },
        "position": {
          "basis": "100%"
        },
        "propConfig": {
          "custom.filteredData": {
            "binding": {
              "config": {
                "struct": {
                  "filters": "{this.custom.filters}",
                  "source": "hasChanged({this.custom.sqlData})"
                },
                "waitOnAll": true
              },
              "transforms": [
                {
                  "code": "\treturn filters.applyFiltersOnDataset(self.custom.sqlData, self.custom.filters)",
                  "type": "script"
                }
              ],
              "type": "expr-struct"
            }
          },
          "custom.filters": {
            "binding": {
              "config": {
                "path": "session.custom.filters"
              },
              "transforms": [
                {
                  "code": "\treturn filters.retrievePageFilters(value, self.page.props.pageId)",
                  "type": "script"
                }
              ],
              "type": "property"
            }
          },
          "custom.sqlData": {
            "binding": {
              "config": {
                "parameters": {
                  "dayRange": "{view.params.dayRange}"
                },
                "queryPath": "Volunteers/Dashboard/SelectVolunteers"
              },
              "type": "query"
            },
            "persistent": true
          },
          "props.data": {
            "binding": {
              "config": {
                "path": "this.custom.filteredData"
              },
              "transforms": [
                {
                  "code": "\t####THIS SECTION FOR INFORMATION ONLY####\n\t#Example Volunteer data object should look like this:\n\t{\n\t\t  \"Check-In\": \"4/4/1975\",\n\t\t  \"Check-Out\": \"Next Assignment\",\n\t\t  \"Hours\": 1,\n\t\t  \"Name\": {\n\t\t    \"style\": {\n\t\t      \"color\": \"#0c4e85\",\n\t\t      \"cursor\": \"pointer\",\n\t\t      \"fontFamily\": \"Proxima Nova ExCn Medium\\n\",\n\t\t      \"text-align\": \"left\"\n\t\t    },\n\t\t    \"value\": \"Tyler George Adams\"\n\t\t  },\n\t\t  \"Options\": \"\",\n\n\t\t}\n\t####END INFORMATION####\n\n\tself.updateExternalData()\n\n\t####BEGIN ACTUAL SCRIPT####\n\t#Volunteers is the data object to return\n\tvolunteers \u003d []\n\t#Iterate over the results of the query\n\tfor row in range(value.getRowCount()):\n\t\tiRow \u003d {key: value.getValueAt(row,key) for key in value.columnNames}\n\t\tif filters.applyFilters(iRow,self.custom.filters):\n\t\t\t#v is an individual volunteer to appends to \u0027volunteers\u0027\n\t\t\tv \u003d {}\n\t\t\t#n is the \u0027name\u0027 attribute of \u0027v\u0027\n\t\t\tn \u003d {}\n\t\t\t#s is the \u0027style\u0027 attribute of \u0027n\u0027\n\t\t\ts \u003d {}\n\t\t\t\n\t\t\t#Map query results into correct attributes\n\t\t\t#v[\u0027NextServiceDate\u0027] \u003d value.getValueAt(row, \"Next Service Date\")\n\t\t\tv[\u0027Check-In\u0027] \u003d value.getValueAt(row, \"checkin\")\n\t\t\tv[\u0027Check-Out\u0027] \u003d value.getValueAt(row, \"checkout\")\n\t\t\tv[\u0027Hours\u0027] \u003d value.getValueAt(row, \"Hours\")\n#\t\t\tv[\u0027Email\u0027] \u003d value.getValueAt(row, \"Email\")\n\t\t\tv[\u0027id\u0027] \u003d str(value.getValueAt(row, \"id\"))\n\t\t\tv[\"EventName\"] \u003d value.getValueAt(row, \"EventName\")\n\t\t\tv[\u0027EventDate\u0027] \u003d value.getValueAt(row, \"EventDate\")\n\t\t\tv[\u0027Gender\u0027] \u003d value.getValueAt(row, \"Gender\")\n\t\t\t\n\t\t\t#Style is static\n\t\t\ts[\u0027color\u0027] \u003d \u0027#0c4e85\u0027\n#\t\t\ts[\u0027cursor\u0027] \u003d \"pointer\"\n\t\t\ts[\u0027fontFamily\u0027] \u003d \"Proxima Nova ExCn Medium\"\n\t\t\ts[\u0027text-align\u0027] \u003d \"left\"\n\t\t\t\n\t\t\t#Build the \u0027name\u0027 attribute\n\t\t\tn[\u0027style\u0027] \u003d s\n\t\t\tn[\u0027value\u0027] \u003d str(value.getValueAt(row, \"Name\"))\n\t\t\tv[\u0027Name\u0027] \u003d n\n\t\t\t\n#\t\t\tv[\u0027Options\u0027] \u003d \u0027\u0027\n\t\t\t\n\t\t\t\n\t\t\t#Append the individual volunteer to the volunteerss object\n\t\t\tvolunteers.append(v)\n\t\t\n\treturn volunteers",
                  "type": "script"
                }
              ],
              "type": "property"
            }
          }
        },
        "props": {
          "cells": {
            "style": {
              "classes": "Table/Cell_Dashboard"
            }
          },
          "columns": [
            {
              "align": "center",
              "boolean": "checkbox",
              "dateFormat": "MM/DD/YYYY",
              "editable": false,
              "field": "Name",
              "footer": {
                "align": "center",
                "justify": "left",
                "style": {
                  "classes": ""
                },
                "title": ""
              },
              "header": {
                "align": "center",
                "justify": "left",
                "style": {
                  "background-origin": "content-box",
                  "backgroundPosition": "right center",
                  "backgroundRepeat": "no-repeat",
                  "classes": "Table/Column_Header",
                  "cursor": "pointer",
                  "paddingRight": "38px",
                  "wordWrap": "break-word"
                },
                "title": "Name"
              },
              "justify": "auto",
              "number": "value",
              "numberFormat": "0,0.##",
              "progressBar": {
                "bar": {
                  "color": "#62A3F6",
                  "linecap": "round",
                  "width": 5
                },
                "max": 100,
                "track": {
                  "color": "#DADADA",
                  "linecap": "round",
                  "width": 2
                },
                "value": {
                  "color": "#7D7D7D",
                  "show": true
                }
              },
              "render": "auto",
              "resizable": true,
              "sort": "none",
              "sortable": true,
              "strictWidth": false,
              "style": {
                "classes": "",
                "fontWeight": "normal"
              },
              "toggleSwitch": {
                "color": {
                  "selected": "#2196F3",
                  "unselected": "#FFFFFF"
                }
              },
              "viewParams": {},
              "viewPath": "",
              "visible": true,
              "width": ""
            },
            {
              "align": "center",
              "boolean": "checkbox",
              "dateFormat": "MM/DD/YYYY",
              "editable": false,
              "field": "EventName",
              "footer": {
                "align": "center",
                "justify": "left",
                "style": {
                  "classes": ""
                },
                "title": ""
              },
              "header": {
                "align": "center",
                "justify": "left",
                "style": {
                  "background-origin": "content-box",
                  "backgroundPosition": "right center",
                  "backgroundRepeat": "no-repeat",
                  "classes": "Table/Column_Header",
                  "cursor": "pointer",
                  "paddingRight": "38px",
                  "wordWrap": "break-word"
                },
                "title": "Event"
              },
              "justify": "auto",
              "number": "value",
              "numberFormat": "0,0.##",
              "progressBar": {
                "bar": {
                  "color": "#62A3F6",
                  "linecap": "round",
                  "width": 5
                },
                "max": 100,
                "track": {
                  "color": "#DADADA",
                  "linecap": "round",
                  "width": 2
                },
                "value": {
                  "color": "#7D7D7D",
                  "show": true
                }
              },
              "render": "auto",
              "resizable": true,
              "sort": "none",
              "sortable": true,
              "strictWidth": false,
              "style": {},
              "toggleSwitch": {
                "color": {
                  "selected": "#2196F3",
                  "unselected": "#FFFFFF"
                }
              },
              "viewParams": {},
              "viewPath": "",
              "visible": true,
              "width": ""
            },
            {
              "align": "center",
              "boolean": "checkbox",
              "dateFormat": "MM/DD/YYYY",
              "editable": false,
              "field": "EventDate",
              "footer": {
                "align": "center",
                "justify": "left",
                "style": {
                  "classes": ""
                },
                "title": ""
              },
              "header": {
                "align": "center",
                "justify": "left",
                "style": {
                  "background-origin": "content-box",
                  "backgroundPosition": "right center",
                  "backgroundRepeat": "no-repeat",
                  "classes": "Table/Column_Header",
                  "cursor": "pointer",
                  "paddingRight": "0px",
                  "wordWrap": "break-word"
                },
                "title": "Date"
              },
              "justify": "auto",
              "number": "value",
              "numberFormat": "0,0.##",
              "progressBar": {
                "bar": {
                  "color": "",
                  "style": {
                    "classes": ""
                  }
                },
                "max": 100,
                "min": 0,
                "track": {
                  "color": "",
                  "style": {
                    "classes": ""
                  }
                },
                "value": {
                  "enabled": true,
                  "format": "0,0.##",
                  "justify": "center",
                  "style": {
                    "classes": ""
                  }
                }
              },
              "render": "auto",
              "resizable": true,
              "sort": "none",
              "sortable": true,
              "strictWidth": false,
              "style": {},
              "toggleSwitch": {
                "color": {
                  "selected": "",
                  "unselected": ""
                }
              },
              "viewParams": {},
              "viewPath": "",
              "visible": true,
              "width": ""
            },
            {
              "align": "center",
              "boolean": "checkbox",
              "dateFormat": "MM/DD/YYYY hh:mm a",
              "editable": false,
              "field": "Check-In",
              "footer": {
                "align": "center",
                "justify": "left",
                "style": {
                  "classes": ""
                },
                "title": ""
              },
              "header": {
                "align": "center",
                "justify": "left",
                "style": {
                  "background-origin": "content-box",
                  "backgroundPosition": "right center",
                  "backgroundRepeat": "no-repeat",
                  "classes": "Table/Column_Header",
                  "cursor": "pointer",
                  "paddingRight": "25px",
                  "wordWrap": "break-word"
                },
                "title": "Check-In"
              },
              "justify": "auto",
              "number": "value",
              "numberFormat": "0,0.##",
              "progressBar": {
                "bar": {
                  "color": "#62A3F6",
                  "linecap": "round",
                  "width": 5
                },
                "max": 100,
                "track": {
                  "color": "#DADADA",
                  "linecap": "round",
                  "width": 2
                },
                "value": {
                  "color": "#7D7D7D",
                  "show": true
                }
              },
              "render": "auto",
              "resizable": true,
              "sort": "none",
              "sortable": true,
              "strictWidth": false,
              "style": {},
              "toggleSwitch": {
                "color": {
                  "selected": "#2196F3",
                  "unselected": "#FFFFFF"
                }
              },
              "viewParams": {},
              "viewPath": "",
              "visible": true,
              "width": ""
            },
            {
              "align": "center",
              "boolean": "checkbox",
              "dateFormat": "MM/DD/YYYY hh:mm a",
              "editable": false,
              "field": "Check-Out",
              "footer": {
                "align": "center",
                "justify": "left",
                "style": {
                  "classes": ""
                },
                "title": ""
              },
              "header": {
                "align": "center",
                "justify": "left",
                "style": {
                  "background-origin": "content-box",
                  "backgroundPosition": "right center",
                  "backgroundRepeat": "no-repeat",
                  "classes": "Table/Column_Header",
                  "cursor": "pointer",
                  "paddingRight": "0px",
                  "wordWrap": "break-word"
                },
                "title": "Check-Out"
              },
              "justify": "auto",
              "number": "value",
              "numberFormat": "0,0.##",
              "progressBar": {
                "bar": {
                  "color": "#62A3F6",
                  "linecap": "round",
                  "width": 5
                },
                "max": 100,
                "track": {
                  "color": "#DADADA",
                  "linecap": "round",
                  "width": 2
                },
                "value": {
                  "color": "#7D7D7D",
                  "show": true
                }
              },
              "render": "auto",
              "resizable": true,
              "sort": "none",
              "sortable": true,
              "strictWidth": false,
              "style": {
                "classes": ""
              },
              "toggleSwitch": {
                "color": {
                  "selected": "#2196F3",
                  "unselected": "#FFFFFF"
                }
              },
              "viewParams": {},
              "viewPath": "",
              "visible": true,
              "width": ""
            },
            {
              "align": "center",
              "boolean": "checkbox",
              "dateFormat": "MM/DD/YYYY",
              "editable": false,
              "field": "Hours",
              "footer": {
                "align": "center",
                "justify": "left",
                "style": {
                  "classes": ""
                },
                "title": ""
              },
              "header": {
                "align": "center",
                "justify": "left",
                "style": {
                  "background-origin": "content-box",
                  "backgroundPosition": "right center",
                  "backgroundRepeat": "no-repeat",
                  "classes": "Table/Column_Header",
                  "cursor": "pointer",
                  "paddingRight": "38px",
                  "wordWrap": "break-word"
                },
                "title": "Hours"
              },
              "justify": "auto",
              "number": "value",
              "numberFormat": "0,0.##",
              "progressBar": {
                "bar": {
                  "color": "#62A3F6",
                  "linecap": "round",
                  "width": 5
                },
                "max": 100,
                "track": {
                  "color": "#DADADA",
                  "linecap": "round",
                  "width": 2
                },
                "value": {
                  "color": "#7D7D7D",
                  "show": true
                }
              },
              "render": "auto",
              "resizable": true,
              "sort": "none",
              "sortable": true,
              "strictWidth": false,
              "style": {
                "classes": ""
              },
              "toggleSwitch": {
                "color": {
                  "selected": "#2196F3",
                  "unselected": "#FFFFFF"
                }
              },
              "viewParams": {},
              "viewPath": "",
              "visible": true,
              "width": ""
            },
            {
              "align": "center",
              "boolean": "checkbox",
              "dateFormat": "MM/DD/YYYY",
              "editable": false,
              "field": "id",
              "footer": {
                "align": "center",
                "justify": "left",
                "style": {
                  "classes": ""
                },
                "title": ""
              },
              "header": {
                "align": "center",
                "justify": "left",
                "style": {
                  "classes": ""
                },
                "title": ""
              },
              "justify": "auto",
              "number": "value",
              "numberFormat": "0,0.##",
              "progressBar": {
                "bar": {
                  "color": "",
                  "style": {
                    "classes": ""
                  }
                },
                "max": 100,
                "min": 0,
                "track": {
                  "color": "",
                  "style": {
                    "classes": ""
                  }
                },
                "value": {
                  "enabled": true,
                  "format": "0,0.##",
                  "justify": "center",
                  "style": {
                    "classes": ""
                  }
                }
              },
              "render": "auto",
              "resizable": true,
              "sort": "none",
              "sortable": true,
              "strictWidth": false,
              "style": {
                "background-origin": "content-box",
                "backgroundPosition": "right center",
                "backgroundRepeat": "no-repeat",
                "classes": "Table/Column_Header",
                "cursor": "pointer",
                "paddingRight": "0px",
                "wordWrap": "break-word"
              },
              "toggleSwitch": {
                "color": {
                  "selected": "",
                  "unselected": ""
                }
              },
              "viewParams": {},
              "viewPath": "",
              "visible": false,
              "width": ""
            }
          ],
          "headerGroups": [
            [
              {
                "align": "center",
                "justify": "left",
                "span": 1,
                "style": {
                  "classes": ""
                },
                "title": ""
              },
              {
                "align": "center",
                "justify": "left",
                "span": 1,
                "style": {
                  "background-origin": "content-box",
                  "background-size": "15px",
                  "backgroundImage": "url(\"/system/images/SVGs/Arrow (Menu).svg\")",
                  "backgroundPosition": "right center",
                  "backgroundRepeat": "no-repeat",
                  "classes": "",
                  "color": "#0d80e3",
                  "wordWrap": "break-word"
                },
                "title": "Name"
              },
              {
                "align": "center",
                "justify": "left",
                "span": 1,
                "style": {
                  "background-origin": "content-box",
                  "background-size": "15px",
                  "backgroundImage": "url(\"/system/images/SVGs/Arrow (Menu).svg\")",
                  "backgroundPosition": "right center",
                  "backgroundRepeat": "no-repeat",
                  "classes": "",
                  "color": "#0d80e3",
                  "wordWrap": "break-word"
                },
                "title": "ID"
              },
              {
                "align": "center",
                "justify": "left",
                "span": 1,
                "style": {
                  "background-origin": "content-box",
                  "background-size": "15px",
                  "backgroundImage": "url(\"/system/images/SVGs/Arrow (Menu).svg\")",
                  "backgroundPosition": "right center",
                  "backgroundRepeat": "no-repeat",
                  "classes": "",
                  "color": "#0d80e3",
                  "wordWrap": "break-word"
                },
                "title": "Birth Date"
              },
              {
                "align": "center",
                "justify": "left",
                "span": 1,
                "style": {
                  "background-origin": "content-box",
                  "background-size": "15px",
                  "backgroundImage": "url(\"/system/images/SVGs/Arrow (Menu).svg\")",
                  "backgroundPosition": "right center",
                  "backgroundRepeat": "no-repeat",
                  "classes": "",
                  "color": "#0d80e3",
                  "wordWrap": "break-word"
                },
                "title": "Gender"
              },
              {
                "align": "center",
                "justify": "left",
                "span": 1,
                "style": {
                  "background-origin": "content-box",
                  "background-size": "15px",
                  "backgroundImage": "url(\"/system/images/SVGs/Arrow (Menu).svg\")",
                  "backgroundPosition": "right center",
                  "backgroundRepeat": "no-repeat",
                  "classes": "",
                  "color": "#0d80e3",
                  "wordWrap": "break-word"
                },
                "title": "Intake Date"
              },
              {
                "align": "center",
                "justify": "left",
                "span": 1,
                "style": {
                  "background-origin": "content-box",
                  "background-size": "15px",
                  "backgroundImage": "url(\"/system/images/SVGs/Arrow (Menu).svg\")",
                  "backgroundPosition": "right center",
                  "backgroundRepeat": "no-repeat",
                  "classes": "",
                  "color": "#0d80e3",
                  "wordWrap": "break-word"
                },
                "title": "Last Action"
              },
              {
                "align": "center",
                "justify": "left",
                "span": 1,
                "style": {
                  "background-origin": "content-box",
                  "background-size": "15px",
                  "backgroundImage": "url(\"/system/images/SVGs/Arrow (Menu).svg\")",
                  "backgroundPosition": "right center",
                  "backgroundRepeat": "no-repeat",
                  "classes": "",
                  "color": "#0d80e3",
                  "wordWrap": "break-word"
                },
                "title": "Suspension"
              },
              {
                "align": "center",
                "justify": "left",
                "span": 1,
                "style": {
                  "background-origin": "content-box",
                  "background-size": "15px",
                  "backgroundImage": "url(\"/system/images/SVGs/Arrow (Menu).svg\")",
                  "backgroundPosition": "right center",
                  "backgroundRepeat": "no-repeat",
                  "classes": "",
                  "color": "#0d80e3",
                  "wordWrap": "break-word"
                },
                "title": "Shelter"
              }
            ]
          ],
          "rows": {
            "striped": {
              "enabled": false
            }
          },
          "selection": {
            "enableColumnSelection": true
          },
          "style": {
            "classes": "Background/Default"
          }
        },
        "scripts": {
          "customMethods": [
            {
              "name": "FilterTable",
              "params": [],
              "script": "\t# implement your method here\n\tdataset \u003d self.custom.sqlData\n\theaders \u003d [\"Name\", \"Phone Number\", \"Email\", \"dob\", \"EventName\", \"EventDate\", \"id\", \"checkin\",\"checkout\", \"Hours\", \"Gender\"]\n\tfilteredDataset \u003d dataset\n\t\n\tif filteredDataset is None:\n\t\treturn\n\t\n\t# Filter Event Name selection\t\n\tEvents \u003d self.view.params.Events\n\treturnDataset \u003d []\n\tif Events is not None and len(Events) \u003e 0:\n\t\tfor i in range (filteredDataset.getRowCount()):\n\t\t\tfor j in [4]:\n\t\t\t\toneRow \u003d []\n\t\t\t\tcellValue \u003d filteredDataset.getValueAt(i,j)\n\t\t\t\tif cellValue in Events:\n\t\t\t\t\toneRow \u003d [filteredDataset.getValueAt(i,x) for x in range(filteredDataset.getColumnCount())]\n\t\t\t\t\treturnDataset.append(oneRow)\n\t\t\t\t\tbreak\n\t\tfilteredDataset \u003d system.dataset.toDataSet(headers, returnDataset)\n\t\n\t\n\t\n\t# Filter Gender\n\tgender \u003d self.view.params.Gender\n\treturnDataset \u003d []\n\tif gender not in [None, \"\"]:\n\t\tfor i in range (filteredDataset.getRowCount()):\n\t\t\tfor j in [10]:\n\t\t\t\toneRow \u003d []\n\t\t\t\tcellValue \u003d filteredDataset.getValueAt(i,j)\n\t\t\t\tif cellValue \u003d\u003d gender:\n\t\t\t\t\toneRow \u003d [filteredDataset.getValueAt(i,x) for x in range(filteredDataset.getColumnCount())]\n\t\t\t\t\treturnDataset.append(oneRow)\n\t\t\t\t\tbreak\n\t\tfilteredDataset \u003d system.dataset.toDataSet(headers, returnDataset)\n\t# name/event name\n\tsearcthText \u003d self.view.params.searchText\n\treturnDataset \u003d []\n\tif searcthText !\u003d \"\":\n\t\tfor i in range (filteredDataset.getRowCount()):\n\t\t\tfor j in [0,4]:\n\t\t\t\toneRow \u003d []\n\t\t\t\tcellValue \u003d filteredDataset.getValueAt(i,j)\n\t\t\t\tif cellValue!\u003dNone:\n\t\t\t\t\tif str(cellValue).lower().find(searcthText) !\u003d -1 :\n\t\t\t\t\t\t#oneRow \u003d [originaldataset.getValueAt(i,0),originaldataset.getValueAt(i,1),originaldataset.getValueAt(i,2),originaldataset.getValueAt(i,3),originaldataset.getValueAt(i,4),originaldataset.getValueAt(i,5),originaldataset.getValueAt(i,6),originaldataset.getValueAt(i,7),originaldataset.getValueAt(i,8),originaldataset.getValueAt(i,9),originaldataset.getValueAt(i,10),originaldataset.getValueAt(i,11)]\n\t\t\t\t\t#\tfor x in range(originaldataset.getColumnCount()):\n\t\t\t\t\t\t#\toneRow.append(originaldataset.getValueAt(i,x))\n\t\t\t\t\t\toneRow \u003d [filteredDataset.getValueAt(i,x) for x in range(filteredDataset.getColumnCount())]\n\t\t\t\t\t\treturnDataset.append(oneRow)\n\t\t\t\t\t\tbreak\n\t\tfilteredDataset \u003d system.dataset.toDataSet(headers, returnDataset)\n\n\tself.custom.filteredData \u003d filteredDataset"
            },
            {
              "name": "updateExternalData",
              "params": [],
              "script": "\tfinalData \u003d self.custom.filteredData\n\t\n\t# create a payload for the filters\n\tfilters\u003d {\"Events\":[]}\n\t# create a payload for the card data\n\tcards \u003d {\"TotalHours\":0, \"ActiveVolunteers\":0, \"ActiveEvents\":0}\n\t\n\tevents \u003d []\n\tvolunteers \u003d []\n\tvolunteerHours \u003d 0\n\tactiveEvents \u003d []\n\tif finalData is not None:\n\t\tfor rCnt in range(finalData.getRowCount()):\n\t\t\tif finalData.getValueAt(rCnt, \"EventName\") not in events:\n\t\t\t\tevents.append(finalData.getValueAt(rCnt, \"EventName\"))\n\t\t\teventInst \u003d finalData.getValueAt(rCnt, \"EventName\") + str(finalData.getValueAt(rCnt, \"EventDate\"))\n\t\t\tif eventInst not in activeEvents:\n\t\t\t\tactiveEvents.append(eventInst)\t\t\n\t\t\tif finalData.getValueAt(rCnt, \"Hours\") is not None:\n\t\t\t\tvolunteerHours +\u003d finalData.getValueAt(rCnt, \"Hours\")\n\t\t\tif finalData.getValueAt(rCnt, \"id\") not in volunteers:\n\t\t\t\tvolunteers.append(finalData.getValueAt(rCnt, \"id\"))\n\t\t\t\n\t\t\n\t\tfilters[\"Events\"] \u003d events\n\t\t\n\t\tcards[\"TotalHours\"] \u003d volunteerHours\n\t\tcards[\"ActiveVolunteers\"] \u003d len(volunteers)\n\t\tcards[\"ActiveEvents\"] \u003d len(activeEvents)\n\t\n\tsystem.perspective.sendMessage(\"updateFilterOptions\", payload \u003d filters)\n\tsystem.perspective.sendMessage(\"updateCardData\", payload \u003d cards)"
            }
          ],
          "extensionFunctions": null,
          "messageHandlers": [
            {
              "messageType": "filterHandler",
              "pageScope": true,
              "script": "\tsystem.perspective.print(payload)\n\tfilters \u003d self.custom.filters\n\tfilters \u003d []\n\tkey \u003d payload[\"key\"]\n\tstate \u003d payload[\"state\"]\n\tval \u003d payload[\"val\"]\n\tif state:\n\t\tif key not in filters:\n\t\t\tfilters[key] \u003d []\n\t\tif val not in filters[key]:\n\t\t\tfilters[key].append(val)\n\telse:\n\t\tif key in filters:\n\t\t\tif val in filters[key]:\n\t\t\t\tif key in filters[key]:\n\t\t\t\t\tfilters[key].remove(val)\n\tself.refreshBinding(\"props.data\")\n\tsystem.perspective.print(filters)",
              "sessionScope": true,
              "viewScope": true
            },
            {
              "messageType": "table-filter-v2",
              "pageScope": true,
              "script": "\t\n\tfilters \u003d self.custom.filters\n\t_key \u003d payload[\"key\"]\n\t_state \u003d payload[\"state\"]\n\t_val \u003d payload[\"value\"]\n\t_type \u003d payload[\"type\"]\n\tfilter \u003d {\n\t\t\"key\":_key,\n\t\t\"value\":_val,\n\t\t\"type\":_type\n\t}\n\t_found \u003d False\n\n\tfor i,f in enumerate(filters):\n\t\t_f \u003d {\n\t\t\t\"key\":f[\u0027key\u0027],\n\t\t\t\"value\":f[\u0027value\u0027],\n\t\t\t\"type\":f[\u0027type\u0027]\n\t\t}\n\t\tif _f \u003d\u003d filter:\n\t\t\t_found \u003d True\n\t\t\tbreak\n\tif _state and not _found:\n\t\tfilters.append(filter)\n\telif not _state and _found:\n#\telif _found:\n\t\tfilters.pop(i)\n\tself.custom.filters \u003d filters\n\tself.refreshBinding(\"props.data\")",
              "sessionScope": true,
              "viewScope": false
            },
            {
              "messageType": "full-text-filter",
              "pageScope": true,
              "script": "\tsystem.perspective.print(\"fts\")\n\tfilters \u003d self.custom.filters\n\t_val \u003d payload[\"value\"]\n\t_type \u003d \"full_text\"\n\tfilter \u003d {\n\t\t\"key\":\"\",\n\t\t\"value\":_val,\n\t\t\"type\":_type\n\t}\n\n\tfor i,f in enumerate(filters):\n\n\t\tif f[\"type\"] \u003d\u003d \"full_text\":\n\t\t\tfilters.pop(i)\n\t\t\tbreak\n\t\n\tif len(_val):\n\t\tfilters.append(filter)\n\n\tself.custom.filters \u003d filters\n\tself.refreshBinding(\"props.data\")",
              "sessionScope": true,
              "viewScope": false
            },
            {
              "messageType": "volunteersEventFilter",
              "pageScope": false,
              "script": "\n \tself.view.params.searchText \u003d payload[\u0027searchText\u0027].lower() ",
              "sessionScope": true,
              "viewScope": false
            }
          ]
        },
        "type": "ia.display.table"
      }
    ],
    "meta": {
      "name": "root"
    },
    "props": {
      "direction": "column"
    },
    "type": "ia.container.flex"
  }
}