{
  "custom": {
    "edit_data": {
      "employee_id": 1,
      "employee_name": "",
      "hmis": -1,
      "note": "",
      "note_type": "",
      "note_type_id": -1,
      "participant_id": 519,
      "participant_name": "",
      "services": []
    },
    "func_add_service": false
  },
  "params": {
    "output_id": -1,
    "output_name": " ",
    "participant_search": true,
    "row_data": {
      "employee_id": 1,
      "employee_name": "",
      "hmis": -1,
      "note": "",
      "note_id": -1,
      "note_type": "",
      "note_type_id": -1,
      "participant_id": 519,
      "participant_name": "",
      "services": []
    },
    "view_height": 200
  },
  "propConfig": {
    "custom.edit_data": {
      "persistent": true
    },
    "custom.edit_data.id": {
      "binding": {
        "config": {
          "path": "view.params.row_data.id"
        },
        "type": "property"
      },
      "onChange": {
        "enabled": null,
        "script": "\t#Move the row data to the edit data any time the row id changes\n\tself.custom.edit_data \u003d self.params.row_data"
      }
    },
    "custom.edit_data.note_id": {
      "binding": {
        "config": {
          "path": "view.params.row_data.note_id"
        },
        "type": "property"
      },
      "onChange": {
        "enabled": null,
        "script": "\t#Move the row data to the edit data any time the row id changes\n\tself.custom.edit_data \u003d self.params.row_data"
      }
    },
    "custom.edit_data[0].id": {
      "binding": {
        "config": {
          "path": "view.params.drugscreenlogid"
        },
        "type": "property"
      }
    },
    "custom.func_add_service": {
      "onChange": {
        "enabled": null,
        "script": "\timport traceback\n\ttry:\n\t\tif currentValue.value:\n\t\t\tsystem.perspective.print(\u0027Add Service\u0027)\n\t\t\tinstances \u003d self.getChild(\"root\").getChild(\"FlexRepeater\").props.instances\n\t\t\tnull \u003d None\n\t\t\n\t\t\tobject \u003d {\n\t\t \t \"instanceStyle\": {\n\t\t    \t\"classes\": \"\"\n\t\t  \t\t},\n\t\t  \t\t\"instancePosition\": {},\n\t\t  \t\t\"participant_id\":self.custom.edit_data.participant_id,\n\t\t  \t\t\"employee_id\": null,\n\t\t \t\t\"enrollment_id\": null,\n\t\t \t\t\"type_id\": null,\n\t\t  \t\t\"service_id\": null,\n\t\t  \t\t\"HMIS\": null,\n\t\t  \t\t\"quantity\": null,\n\t\t  \t\t\"comment\": \"\",\n\t\t  \t\t\"row_num\": len(instances)\n\t\t\t\t}\n\t\t\t#append to the list\n\t\t\tinstances.append(object)\n  \t\t\tself.getChild(\"root\").getChild(\"FlexRepeater\").props.instances \u003d instances\n\t\t\t#Reset the script trigger\n\t\tself.custom.func_add_service \u003d False\n\texcept:\n\t\tlogger \u003d system.util.getLogger(\"Participants Case Notes Dashboard\")\n\t\tmsg \u003d traceback.format_exc()\n\t\tlogger.error(msg)\t\t"
      },
      "persistent": true
    },
    "params.output_id": {
      "paramDirection": "input",
      "persistent": true
    },
    "params.output_name": {
      "paramDirection": "input",
      "persistent": true
    },
    "params.participant_search": {
      "paramDirection": "output",
      "persistent": true
    },
    "params.row_data": {
      "paramDirection": "input",
      "persistent": true
    },
    "params.row_data.note_id": {
      "paramDirection": "input",
      "persistent": true
    },
    "params.row_data.note_type": {
      "paramDirection": "input",
      "persistent": true
    },
    "params.row_data.note_type_id": {
      "paramDirection": "input",
      "persistent": true
    },
    "params.row_data.participant_name": {
      "paramDirection": "input",
      "persistent": true
    },
    "params.row_data.services": {
      "paramDirection": "input",
      "persistent": true
    },
    "params.view_height": {
      "binding": {
        "config": {
          "path": "view.custom.edit_data.services"
        },
        "transforms": [
          {
            "code": "\tif len(value) \u003c\u003d 3:\n\t\tnum_services \u003d len(value)\n\telse:\n\t\tnum_services \u003d 3\n\t\n\tview_height \u003d (75 * num_services) + 200\n\t\n\treturn view_height",
            "type": "script"
          }
        ],
        "type": "property"
      },
      "paramDirection": "output",
      "persistent": true
    }
  },
  "props": {
    "defaultSize": {
      "height": 589,
      "width": 1043
    }
  },
  "root": {
    "children": [
      {
        "meta": {
          "name": "EmbeddedView Header"
        },
        "position": {
          "basis": "25px",
          "shrink": 0
        },
        "propConfig": {
          "props.params.Text": {
            "binding": {
              "config": {
                "path": "view.custom.edit_data.note_id"
              },
              "transforms": [
                {
                  "expression": "if({value} \u003d -1,\u0027New Case Note: \u0027 + {view.params.output_name},\u0027Edit Case Note: \u0027 + {view.custom.edit_data.participant_name})",
                  "type": "expression"
                }
              ],
              "type": "property"
            }
          }
        },
        "props": {
          "path": "Participants/Templates/Header"
        },
        "type": "ia.display.view"
      },
      {
        "meta": {
          "name": "EmbeddedView Row1"
        },
        "position": {
          "basis": "110px",
          "shrink": 0
        },
        "propConfig": {
          "props.params.func_add_service": {
            "binding": {
              "config": {
                "bidirectional": true,
                "path": "view.custom.func_add_service"
              },
              "type": "property"
            }
          },
          "props.params.hmis": {
            "binding": {
              "config": {
                "bidirectional": true,
                "path": "view.custom.edit_data.hmis"
              },
              "type": "property"
            }
          },
          "props.params.note": {
            "binding": {
              "config": {
                "bidirectional": true,
                "path": "view.custom.edit_data.note"
              },
              "type": "property"
            }
          },
          "props.params.note_type_id": {
            "binding": {
              "config": {
                "bidirectional": true,
                "path": "view.custom.edit_data.note_type_id"
              },
              "type": "property"
            }
          }
        },
        "props": {
          "path": "Participants/Case Notes/Dashboard/Main/Edit/Row1",
          "style": {
            "marginLeft": 25,
            "marginRight": 25
          }
        },
        "type": "ia.display.view"
      },
      {
        "meta": {
          "name": "FlexRepeater"
        },
        "propConfig": {
          "position.basis": {
            "binding": {
              "config": {
                "path": "this.props.instances"
              },
              "transforms": [
                {
                  "code": "\treturn str((len(value)*70))+\"px\"",
                  "type": "script"
                }
              ],
              "type": "property"
            }
          },
          "props.instances": {
            "binding": {
              "config": {
                "bidirectional": true,
                "path": "view.custom.edit_data.services"
              },
              "type": "property"
            }
          }
        },
        "props": {
          "direction": "column",
          "path": "Participants/Case Notes/Dashboard/Main/Edit/Row_Service",
          "style": {
            "marginLeft": "20px",
            "marginRight": "20px",
            "marginTop": "5px"
          },
          "useDefaultViewWidth": false
        },
        "scripts": {
          "customMethods": [],
          "extensionFunctions": null,
          "messageHandlers": [
            {
              "messageType": "RemoveDashboardService",
              "pageScope": true,
              "script": "\timport traceback\n\ttry:\n\t\tinstances \u003d self.props.instances\n\t\treturnInstances \u003d []\n\t\tnull \u003d None\n\t\tRowNumber \u003d 0\n\t\tfor row in instances:\n\t\t\t#system.perspective.print(row)\n\t\t\tif int(row[\"row_num\"]) !\u003d int(payload[\"row_num\"]):\n\t\t\t\tobject \u003d {\n\t\t\t\t\t  \"instanceStyle\": {\n\t\t\t\t\t    \"classes\": \"\"\n\t\t\t\t\t  },\n\t\t\t\t\t  \"instancePosition\": {},\n\t\t\t\t\t  \"participant_id\": row[\"participant_id\"],\n\t\t\t\t\t  \"employee_id\": row[\"employee_id\"],\n\t\t\t\t\t  \"enrollment_id\": row[\"enrollment_id\"],\n\t\t\t\t\t  \"type_id\": row[\"type_id\"]\n\t\t\t\t\t  \"service_id\": row[\"service_id\"],\n\t\t\t\t\t  \"HMIS\": row[\"HMIS\"],\n\t\t\t\t\t  \"quantity\": row[\"quantity\"],\n\t\t\t\t\t  \"comment\": row[\"comment\"],\n\t\t\t\t\t  \"row_num\": RowNumber\n\t\t\t\t\t}\n\t\t\t\tRowNumber +\u003d 1\t\n\t\t\t\treturnInstances.append(object)\n\t\t\t\n\t\tself.props.instances \u003d returnInstances\n\texcept:\n\t\tlogger \u003d system.util.getLogger(\"Participants Case Notes Detail\")\n\t\tmsg \u003d traceback.format_exc()\n\t\tlogger.error(msg)",
              "sessionScope": true,
              "viewScope": true
            }
          ]
        },
        "type": "ia.display.flex-repeater"
      },
      {
        "children": [
          {
            "events": {
              "component": {
                "onActionPerformed": {
                  "config": {
                    "script": "\t#system.perspective.print(\"New Case Note Button Pressed\")\n\t#Send the message to refresh the table\n\tmessageType \u003d \u0027refreshCaseNotesDashboard\u0027\n\tsystem.perspective.sendMessage(messageType)\n\t#Send a message to clear the search box\n\tmessageType \u003d \u0027ResetParticipantSearch\u0027\n\tsystem.perspective.sendMessage(messageType)\n\t#Show the search box\n\tself.view.params.participant_search \u003d True"
                  },
                  "scope": "G",
                  "type": "script"
                }
              }
            },
            "meta": {
              "name": "button_new"
            },
            "position": {
              "basis": "120px",
              "shrink": 0
            },
            "props": {
              "style": {
                "classes": "Buttons/Secondary",
                "marginBottom": "5px",
                "marginLeft": "20px",
                "marginTop": "5px"
              },
              "text": "New Case Note"
            },
            "type": "ia.input.button"
          },
          {
            "events": {
              "component": {
                "onActionPerformed": {
                  "config": {
                    "script": "\timport traceback\n\ttry:\n\t\tproject \u003d \"RITI\"\n\t\t### Declare parameters \n\t\tnote_id \u003d self.view.custom.edit_data.note_id\n\t\ttime_created \u003d system.date.now()\n\t\tuser_name \u003d self.session.props.auth.user.userName\n\t\tif note_id \u003e -1:\n\t\t\tparticipant_id \u003d self.view.custom.edit_data.participant_id\n\t\telse:\n\t\t\tparticipant_id \u003d self.view.params.output_id\n\t\temployee_id \u003d 0\n\t\thmis \u003d self.view.custom.edit_data.hmis\n\t\tnote_type_id \u003d self.view.custom.edit_data.note_type_id\n\t\tnote \u003d self.view.custom.edit_data.note\n\n\t\n\t\t## Check if parameters are filled in correctly \n\t\tvalid \u003d True\n\t\tif (note_id is None):\n\t\t\tvalid \u003d False\n\t\t\tsystem.perspective.print(\"Note ID Error\")\n\t\telif (participant_id is None) or (int(participant_id) \u003c 0):\n\t\t\tvalid \u003d False\n\t\t\tsystem.perspective.print(\"Participant ID Error\")\n\t\telif (time_created is None):\n\t\t\tvalid \u003d False\n\t\t\tsystem.perspective.print(\"Date Error\")\n\t\telif (employee_id is None) or (int(employee_id) \u003c 0):\n\t\t\tvalid \u003d False\n\t\t\tsystem.perspective.print(\"Employee ID Error\")\n\t\telif (note_type_id is None) or (int(note_type_id) \u003c 0):\n\t\t\tvalid \u003d False\n\t\t\tsystem.perspective.print(\"Note Type ID Error\")\n\t\telif (hmis is None) or (int(hmis) \u003c 0):\n\t\t\tvalid \u003d False\n\t\t\tsystem.perspective.print(\"HMIS Selection Error\")\n\t\telif True:\n\t\t\tfor row in range(len(self.view.custom.edit_data.services)):\n\t\t\t\tservice \u003d self.view.custom.edit_data.services[row]\n\t\t\t\tif (service.employee_id) is None or (int(service.employee_id) \u003c 0):\n\t\t\t\t\tvalid \u003d False\n\t\t\t\t\tsystem.perspective.print(\"Service Employee ID Error\")\n\t\t\t\telif (service.enrollment_id) is None or (int(service.enrollment_id) \u003c 0):\n\t\t\t\t\tvalid \u003d False\n\t\t\t\t\tsystem.perspective.print(\"Service Enrollemnt ID Error\")\n\t\t\t\telif (service.service_id) is None or (int(service.service_id) \u003c 0):\n\t\t\t\t\tvalid \u003d False\n\t\t\t\t\tsystem.perspective.print(\"Service ID Error\")\n\t\t\t\telif (service.HMIS is None) or (int(service.HMIS) \u003c 0):\n\t\t\t\t\tvalid \u003d False\n\t\t\t\t\tsystem.perspective.print(\"Service HMIS Selection Error\")\n\t\telif valid \u003d\u003d True:\n\t\t\tsystem.perspective.print(\"Case Notes Dashboard Data Valid\")\n\t\t\n\t\t### Check if data is valid otherwise show error message.\n\t\tif valid:\n\t\t\t### Check if the user is creating new data\n\t\t\tif note_id \u003d\u003d -1:#Insert new data, no row_id\n\t\t\t\t#system.perspective.print(\"Insert New Data\")\n\t\t\t\tpath \u003d \"Participants/CaseNotes/CaseNotesDetailInsert\"\n\t\t\t\tparameters \u003d {\"time_created\":time_created,\n\t\t\t\t\t\t\t\"participant_id\":participant_id,\n\t\t\t\t\t\t\t\"employee_id\":employee_id, \n\t\t\t\t\t\t\t\"hmis\":hmis,\"note_type_id\":note_type_id,\n\t\t\t\t\t\t\t\"note\":note}\n\t\t\t\tnote_row \u003d system.db.runNamedQuery(project\u003dproject,path\u003dpath,parameters\u003dparameters, getKey\u003dTrue)\t\t\n\t\t\t\t#system.perspective.print(\"Insert Note\")\n\t\t\t\t#system.perspective.print(note_row)\n\t\t\t\t#Insert the services\n\t\t\t\tif len(self.view.custom.edit_data.services):\n\t\t\t\t\tfor row in range(len(self.view.custom.edit_data.services)):\n\t\t\t\t\t\tservice \u003d self.view.custom.edit_data.services[row]\n\t\t\t\t\t\temployee_id \u003d service.employee_id\n\t\t\t\t\t\tenrollment_id \u003d service.enrollment_id\n\t\t\t\t\t\tservice_id \u003d service.service_id\n\t\t\t\t\t\tservice_HMIS \u003d service.HMIS\n\t\t\t\t\t\tquantity \u003d service.quantity\n\t\t\t\t\t\tcomment \u003d service.comment\n\t\t\t\t\t\tpath \u003d \"Participants/Services/ServicesDetailInsert\"\n\t\t\t\t\t\tparameters \u003d {\"employee_id\":employee_id, \"enrollment_id\":enrollment_id,\n\t\t\t\t\t\t\t\t\t\"service_id\":service_id, \"participant_id\":participant_id,\n\t\t\t\t\t\t\t\t\t\"time_created\":time_created,\"user_name\":user_name,\n\t\t\t\t\t\t\t\t\t\"HMIS\":service_HMIS,\"quantity\":quantity,\n\t\t\t\t\t\t\t\t\t\"comment\":comment}\n\t\t\t\t\t\tservice_row \u003d system.db.runNamedQuery(project\u003dproject,path\u003dpath,parameters\u003dparameters, getKey\u003dTrue)\n\t\t\t\t\t\t#system.perspective.print(\"Insert Service\")\n\t\t\t\t\t\t#system.perspective.print(service_row)\n\t\t\t\t\t\t#Link the Note and Services together\n\t\t\t\t\t\tpath \u003d \"Participants/CaseNotes/CaseNoteServiceDetailInsert\"\n\t\t\t\t\t\tparameters \u003d {\"case_note_id\":note_row, \"service_id\":service_row,\n\t\t\t\t\t\t\t\t\t\"time_created\":time_created}\n\t\t\t\t\t\tRefresh \u003d system.db.runNamedQuery(project\u003dproject,path\u003dpath,parameters\u003dparameters, getKey\u003dTrue)\n\t\t\t\telse:\n\t\t\t\t\tRefresh \u003d True\n\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t##### Check if the user is editing existing data\n\t\t\telif note_id \u003e\u003d 0:#Update existing data on specified row_id\n\t\t\t\t#system.perspective.print(\"Update Exisiting Data\")\n\t\t\t\tpath \u003d \"Participants/CaseNotes/CaseNotesDetailUpdate\"\n\t\t\t\tparameters \u003d {\"time_created\":time_created,\n\t\t\t\t\t\t\t\"participant_id\":participant_id,\n\t\t\t\t\t\t\t\"employee_id\":employee_id, \n\t\t\t\t\t\t\t\"hmis\":hmis,\"note_type_id\":note_type_id,\n\t\t\t\t\t\t\t\"note\":note,\n\t\t\t\t\t\t\t\"row_id\":note_id}\n\t\t\t\tnothing \u003d system.db.runNamedQuery(project\u003dproject,path\u003dpath,parameters\u003dparameters, getKey\u003dTrue)\n\t\t\t\t#system.perspective.print(\"Insert Note\")\n\t\t\t\t#system.perspective.print(note_id)\n\t\t\t\t#Query and delete all services linked to the case note\n\t\t\t\tpath \u003d \"Participants/Services/ServicesDetailNoteServiceSelect\"\n\t\t\t\tparameters \u003d {\"note_id\":note_id}\n\t\t\t\tservice_list \u003d system.db.runNamedQuery(project\u003dproject,path\u003dpath,parameters\u003dparameters, getKey\u003dTrue)\t\n\t\t\t\t#system.perspective.print(service_list.getRowCount())\n\t\t\t\tif service_list.getRowCount():\n\t\t\t\t\tfor service in range(service_list.getRowCount()):\n\t\t\t\t\t\tservice_id \u003d service_list.getValueAt(service,\u0027ServicesId\u0027)\n\t\t\t\t\t\t#Delete the links to the Case Notes\n\t\t\t\t\t\t#system.perspective.print(\u0027Delete Case Note Link\u0027)\n\t\t\t\t\t\tpath \u003d \"Participants/Services/ServicesDetailCaseNoteDelete\"\n\t\t\t\t\t\tparameters \u003d {\"note_id\":note_id,\"service_id\":service_id}\n\t\t\t\t\t\tRefresh \u003d system.db.runNamedQuery(project\u003dproject,path\u003dpath,parameters\u003dparameters, getKey\u003dTrue)\t\n\t\t\t\t\t\t#Delete the data for the Services\n\t\t\t\t\t\tpath \u003d \"Participants/Services/ServicesDetailDelete\"\n\t\t\t\t\t\tparameters \u003d {\"row_id\":service_id}\n\t\t\t\t\t\t#system.perspective.print(\u0027Delete Service: \u0027 + str(service))\n\t\t\t\t\t\tRefresh \u003d system.db.runNamedQuery(project\u003dproject,path\u003dpath,parameters\u003dparameters, getKey\u003dTrue)\t\n\t\t\t\t#Insert the services\n\t\t\t\tif len(self.view.custom.edit_data.services):\n\t\t\t\t\tfor row in range(len(self.view.custom.edit_data.services)):\n\t\t\t\t\t\tservice \u003d self.view.custom.edit_data.services[row]\n\t\t\t\t\t\temployee_id \u003d service.employee_id\n\t\t\t\t\t\tenrollment_id \u003d service.enrollment_id\n\t\t\t\t\t\tservice_id \u003d service.service_id\n\t\t\t\t\t\tservice_HMIS \u003d service.HMIS\n\t\t\t\t\t\tquantity \u003d service.quantity\n\t\t\t\t\t\tcomment \u003d service.comment\n\t\t\t\t\t\tpath \u003d \"Participants/Services/ServicesDetailInsert\"\n\t\t\t\t\t\tparameters \u003d {\"employee_id\":employee_id, \"enrollment_id\":enrollment_id,\n\t\t\t\t\t\t\t\t\t\"service_id\":service_id, \"participant_id\":participant_id,\n\t\t\t\t\t\t\t\t\t\"time_created\":time_created,\"user_name\":user_name,\n\t\t\t\t\t\t\t\t\t\"HMIS\":service_HMIS,\"quantity\":quantity,\n\t\t\t\t\t\t\t\t\t\"comment\":comment}\n\t\t\t\t\t\tservice_id \u003d system.db.runNamedQuery(project\u003dproject,path\u003dpath,parameters\u003dparameters, getKey\u003dTrue)\n\t\t\t\t\t\t#system.perspective.print(\"Insert Service\")\n\t\t\t\t\t\t#system.perspective.print(service_id)\n\t\t\t\t\t\t#system.perspective.print(note_id)\n\t\t\t\t\t\t#Link the Note and Services together\n\t\t\t\t\t\tpath \u003d \"Participants/CaseNotes/CaseNoteServiceDetailInsert\"\n\t\t\t\t\t\tparameters \u003d {\"case_note_id\":note_id, \"service_id\":service_id,\n\t\t\t\t\t\t\t\t\t\"time_created\":time_created}\n\t\t\t\t\t\tRefresh \u003d system.db.runNamedQuery(project\u003dproject,path\u003dpath,parameters\u003dparameters, getKey\u003dTrue)\n\t\t\t\telse:\n\t\t\t\t\tRefresh \u003d True\t\n\t\t\t##### Refresh the table\n\t\t\tif Refresh:\n\t\t\t\tsystem.perspective.print(\"Case Notes Dashboard Query Success\")\n\t\t\tsystem.perspective.sendMessage(messageType\u003d\"refreshCaseNotesDashboardData\", payload\u003d{}, scope\u003d\"session\")\n\t\t\t\t#system.perspective.print(\"New Case Note Button Pressed\")\n\n\t\telse:\n\t\t\tself.getSibling(\"Label\").showMessage(\"Please fill in all the fields correctly before saving.\")\n\t\t\t\t\n\texcept:\n\t\tlogger \u003d system.util.getLogger(\"Participants Case Notes Dashboard\")\n\t   \tmsg \u003d traceback.format_exc()\n\t   \tlogger.error(msg)\n\t\tself.getSibling(\"Label\").showMessage(\"Something went wrong while saving data. Please try again.\")\t"
                  },
                  "scope": "G",
                  "type": "script"
                }
              }
            },
            "meta": {
              "name": "button_save"
            },
            "position": {
              "basis": "120px",
              "shrink": 0
            },
            "propConfig": {
              "position.display": {
                "binding": {
                  "config": {
                    "expression": "if({view.custom.edit_data.note_id} \u003e -1,True,\r\nif({view.params.output_id} \u003e -1, True, False))"
                  },
                  "type": "expr"
                }
              },
              "props.text": {
                "binding": {
                  "config": {
                    "expression": "if({view.custom.edit_data.note_id} \u003e -1,\u0027Update Case Note\u0027,\u0027Save Case Note\u0027)"
                  },
                  "type": "expr"
                }
              }
            },
            "props": {
              "style": {
                "classes": "Buttons/Main",
                "marginBottom": "5px",
                "marginLeft": "10px",
                "marginTop": "5px"
              }
            },
            "type": "ia.input.button"
          },
          {
            "events": {
              "component": {
                "onActionPerformed": {
                  "config": {
                    "script": "\t### Declare parameters\n\tproject \u003d \"RITI\" \n\tnote_id \u003d self.view.custom.edit_data.note_id\n\t\t\n\t## Check if parameters are filled in correctly \n\tif (note_id is None) or (int(note_id) \u003c 0):\n\t\tvalid \u003d False\n\t\tsystem.perspective.print(\"Note ID Error\")\n\telse:\n\t\tvalid \u003d True\n\t\tsystem.perspective.print(\"Case Notes Dashboard Data Valid\")\n\t\t\t\n\t### Check if data is valid otherwise show error message.\n\tif valid:\n\t\ttry:\n\t\t\t#Query and delete all services linked to the case note\n\t\t\tpath \u003d \"Participants/Services/ServicesDetailNoteServiceSelect\"\n\t\t\tparameters \u003d {\"note_id\":note_id}\n\t\t\tservice_list \u003d system.db.runNamedQuery(project\u003dproject,path\u003dpath,parameters\u003dparameters, getKey\u003dTrue)\t\n\t\t\t#system.perspective.print(str(service_list.getRowCount()) + \u0027 linked services found\u0027)\n\t\t\tif service_list.getRowCount():\n\t\t\t\tfor service in range(service_list.getRowCount()):\n\t\t\t\t\tservice_id \u003d service_list.getValueAt(service,\u0027ServicesId\u0027)\n\t\t\t\t\t#Delete the links to the Case Notes\n\t\t\t\t\t#system.perspective.print(\u0027Delete Case Note Link. Case Note:\u0027 + str(note_id) + \u0027 Service:\u0027 + str(service_id))\n\t\t\t\t\tpath \u003d \"Participants/Services/ServicesDetailCaseNoteDelete\"\n\t\t\t\t\tparameters \u003d {\"note_id\":note_id,\"service_id\":service_id}\n\t\t\t\t\tRefresh_link \u003d system.db.runNamedQuery(project\u003dproject,path\u003dpath,parameters\u003dparameters, getKey\u003dTrue)\t\n\t\t\t\t\t#Delete the data for the Services\n\t\t\t\t\tpath \u003d \"Participants/Services/ServicesDetailDelete\"\n\t\t\t\t\tparameters \u003d {\"row_id\":service_id}\n\t\t\t\t\t#system.perspective.print(\u0027Delete Service: \u0027 + str(service_id))\n\t\t\t\t\tRefresh_service \u003d system.db.runNamedQuery(project\u003dproject,path\u003dpath,parameters\u003dparameters, getKey\u003dTrue)\t\n\t\t\t#Delete the Case Note\n\t\t\tpath \u003d \"Participants/CaseNotes/CaseNotesDetailDelete\"\n\t\t\tparameters \u003d {\"row_id\":note_id}\n\t\t\t#system.perspective.print(\u0027Delete Case Note: \u0027 + str(note_id))\n\t\t\tRefresh \u003d system.db.runNamedQuery(project\u003dproject,path\u003dpath,parameters\u003dparameters, getKey\u003dTrue)\t\t\n\n\t\t\t##### Refresh the table\n\t\t\tsystem.perspective.sendMessage(messageType\u003d\"refreshCaseNotesDashboardData\", payload\u003d{}, scope\u003d\"session\")\n\t\t\t\n\t\texcept:\n\t\t\tself.getSibling(\"Label\").showMessage(\"Something went wrong while deleting data. Please try again.\")\t\n\telse:\n\t\tself.getSibling(\"Label\").showMessage(\"Something went wrong while saving data. Please try again.\")\n\t\t\n\t"
                  },
                  "scope": "G",
                  "type": "script"
                }
              }
            },
            "meta": {
              "name": "button_delete"
            },
            "position": {
              "basis": "120px",
              "shrink": 0
            },
            "propConfig": {
              "position.display": {
                "binding": {
                  "config": {
                    "expression": "if({view.custom.edit_data.note_id} \u003d -1, False, True)"
                  },
                  "type": "expr"
                }
              }
            },
            "props": {
              "style": {
                "classes": "Buttons/Delete",
                "marginBottom": "5px",
                "marginLeft": "10px",
                "marginTop": "5px"
              },
              "text": "Delete Case Note"
            },
            "type": "ia.input.button"
          },
          {
            "meta": {
              "name": "Label",
              "visible": false
            },
            "position": {
              "basis": "50px",
              "grow": 1
            },
            "props": {
              "style": {
                "classes": "Text/Error_Message"
              },
              "text": "Please fill in all the fields correctly before saving."
            },
            "scripts": {
              "customMethods": [
                {
                  "name": "showMessage",
                  "params": [
                    "message"
                  ],
                  "script": "\timport time\n\tself.props.text \u003d message\n\tself.meta.visible \u003d True\n\ttime.sleep(5)\n\tself.meta.visible \u003d False\n\t"
                }
              ],
              "extensionFunctions": null,
              "messageHandlers": []
            },
            "type": "ia.display.label"
          }
        ],
        "meta": {
          "name": "root Actions"
        },
        "position": {
          "basis": "50px",
          "shrink": 0
        },
        "props": {
          "style": {
            "borderTopColor": "#9db8d1",
            "borderTopStyle": "solid",
            "borderTopWidth": "1px",
            "classes": "Background/Default",
            "marginTop": "5px",
            "paddingTop": "5px"
          }
        },
        "type": "ia.container.flex"
      },
      {
        "meta": {
          "name": "Label"
        },
        "position": {
          "basis": "32px",
          "display": false
        },
        "propConfig": {
          "props.text": {
            "binding": {
              "config": {
                "expression": "\u0027Participant:\u0027 + \r\nif({view.custom.edit_data.note_id} \u003e -1,{view.custom.edit_data.participant_id},{view.params.output_id}) + \r\n\u0027, HMIS:\u0027 +\r\n{view.custom.edit_data.hmis} + \r\n\u0027, Note:\u0027 +\r\n{view.custom.edit_data.note}"
              },
              "type": "expr"
            }
          }
        },
        "props": {
          "style": {
            "classes": "Text/Error_Message"
          }
        },
        "type": "ia.display.label"
      }
    ],
    "meta": {
      "name": "root"
    },
    "props": {
      "direction": "column",
      "style": {
        "classes": "Background/Default"
      }
    },
    "type": "ia.container.flex"
  }
}