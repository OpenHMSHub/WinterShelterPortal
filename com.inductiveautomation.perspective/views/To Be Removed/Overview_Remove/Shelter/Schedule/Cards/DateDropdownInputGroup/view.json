{
  "custom": {},
  "params": {},
  "props": {
    "defaultSize": {
      "height": 60
    }
  },
  "root": {
    "children": [
      {
        "meta": {
          "name": "EmbeddedView_CheckIn"
        },
        "position": {
          "basis": "320px"
        },
        "propConfig": {
          "props.params.jsonOut": {
            "onChange": {
              "enabled": null,
              "script": "\tembSec \u003d self.getSibling(\"EmbeddedView_CheckOut\")\n\n\t#system.perspective.print((\u0027before embSec.props.params.jsonIn: \u0027,embSec.props.params.jsonIn))\n\t\n\t# Convert 2nd view jsonBase to python collection\n\tsecPyIn \u003d system.util.jsonDecode(embSec.props.params.jsonIn)\n\t\n\t# Convert 1st view jsonOut to python collection\n\tprimPyOut \u003d system.util.jsonDecode(currentValue.value)\n\t\n\t# Set 2nd view jsonIn node \u0027args\u0027 to array containing value \n\t# from 1st view jsonOut node \u0027args\u0027  \n\t# Do job in python collection then convert to json\n\tsecPyIn[\u0027wherePlus\u0027] \u003d primPyOut[\u0027wherePlus\u0027] \n\t\n\t\n\tembSec.props.params.jsonIn \u003d system.util.jsonEncode(secPyIn)\n\t\n\t#system.perspective.print((\u0027after embSec.props.params.jsonIn: \u0027,embSec.props.params.jsonIn))\t"
            }
          }
        },
        "props": {
          "params": {
            "jsonBase": "{\"cnd\":\"[lodging].[Reservation].[reservationStart] \u003e\u003d ?\",\"prepQuery\":{\"query\":\"WITH cte (dateId) AS (SELECT CAST(GETDATE() AS DATE) UNION ALL SELECT DATEADD(DAY, 1, dateId) FROM cte WHERE dateId \u003c DATEADD(YEAR, 1, GETDATE())) SELECT YEAR(dateId) *10000 + MONTH(dateId)*100 + DAY(dateId) ymdId, CONCAT_WS(\u0027 \u0027,LEFT(DATENAME(MONTH, dateId),3), CAST(DAY(dateId) AS VARCHAR(2)) +\u0027,\u0027, YEAR(dateId)) mmmddyyyy FROM cte ORDER BY ymdId  OPTION (MAXRECURSION 0)\"}}",
            "jsonExpo": "{\"Label.text\":\"Check-in Date\"}",
            "jsonIn": "{\"wherePlus\":[]}",
            "jsonOut": "{\"wherePlus\":[{\"arg\":\"2020-11-26 12:00:00\",\"cnd\":\"[lodging].[Reservation].[reservationStart] \u003e\u003d ?\",\"type\":\"datetime\"}]}"
          },
          "path": "Shelter/Schedule/Cards/DateDropdownInput",
          "style": {
            "classes": "InputCards/InputCard"
          }
        },
        "type": "ia.display.view"
      },
      {
        "meta": {
          "name": "EmbeddedView_CheckOut"
        },
        "position": {
          "basis": "320px"
        },
        "props": {
          "params": {
            "jsonBase": "{\"cnd\":\"[lodging].[Reservation].[reservationStart] \u003e\u003d ?\",\"prepQuery\":{\"query\":\"DECLARE @t1 AS DATETIME \u003d ? ; WITH cte (dateId) AS (SELECT @t1 UNION ALL SELECT DATEADD(DAY, 1, dateId) FROM cte WHERE dateId \u003c DATEADD(MONTH, 2, @t1)) SELECT YEAR(dateId) *10000 + MONTH(dateId)*100 + DAY(dateId) ymdId, CONCAT_WS(\u0027 \u0027,LEFT(DATENAME(MONTH, dateId),3), CAST(DAY(dateId) AS VARCHAR(2)) +\u0027,\u0027, YEAR(dateId)) mmmddyyyy FROM cte ORDER BY ymdId  OPTION (MAXRECURSION 0)\"}}",
            "jsonExpo": "{\"Label.text\":\"Check-out Date\"}",
            "jsonIn": "{\"wherePlus\":[{\"arg\":\"2020-11-26 12:00:00\",\"cnd\":\"[lodging].[Reservation].[reservationStart] \u003e\u003d ?\",\"type\":\"datetime\"}]}",
            "jsonOut": "{\"wherePlus\":[{\"arg\":\"2020-12-30 12:00:00\",\"cnd\":\"[lodging].[Reservation].[reservationStart] \u003e\u003d ?\",\"type\":\"datetime\"}]}"
          },
          "path": "Shelter/Schedule/Cards/DateDropdownInput",
          "style": {
            "classes": "InputCards/InputCard"
          }
        },
        "type": "ia.display.view"
      },
      {
        "meta": {
          "name": "Placeholder"
        },
        "position": {
          "basis": "320px",
          "grow": 1
        },
        "props": {
          "path": "Shelter/Schedule/Cards/Placeholder",
          "style": {
            "classes": "InputCards/InputCard"
          }
        },
        "type": "ia.display.view"
      }
    ],
    "meta": {
      "name": "root"
    },
    "type": "ia.container.flex"
  }
}