{
  "custom": {
    "testCase": 0,
    "testdata": {
      "case-1": null,
      "case0": [
        {
          "roomId": 0,
          "roomName": ""
        },
        null,
        null,
        null,
        null
      ],
      "case1": [
        {
          "bedId": 186,
          "bedName": "Bed 1",
          "bedNameNo": 2,
          "bedState": 0
        },
        null,
        null,
        null,
        null
      ],
      "case10": [
        {
          "facilityId": 1,
          "facilityName": "Apartments"
        },
        null,
        null,
        null,
        null
      ],
      "case11": [
        {
          "roomId": 79,
          "roomName": "Room 15"
        },
        null,
        null,
        null,
        null
      ],
      "case4": [
        {
          "bedId": 81,
          "bedName": "Bed 1",
          "bedNameNo": 1,
          "bedState": 2
        },
        {
          "bedId": 82,
          "bedName": "Bed 2",
          "bedNameNo": 2,
          "bedState": 0
        },
        {
          "bedId": 83,
          "bedName": "Bed 3",
          "bedNameNo": 3,
          "bedState": 0
        },
        {
          "bedId": 84,
          "bedName": "Bed 4",
          "bedNameNo": 4,
          "bedState": 0
        },
        null
      ],
      "case5": [
        {
          "bedId": 56,
          "bedName": "Bed 6",
          "bedNameNo": 6,
          "bedState": 0
        },
        {
          "bedId": 57,
          "bedName": "Bed 7",
          "bedNameNo": 7,
          "bedState": 1
        },
        {
          "bedId": 58,
          "bedName": "Bed 8",
          "bedNameNo": 8,
          "bedState": 2
        },
        {
          "bedId": 59,
          "bedName": "Bed 9",
          "bedNameNo": 9,
          "bedState": 0
        },
        {
          "bedId": 60,
          "bedName": "Bed 10",
          "bedNameNo": 10,
          "bedState": 2
        }
      ],
      "case50": [
        null,
        null,
        null,
        null,
        null
      ]
    }
  },
  "params": {
    "value": [
      {
        "roomId": 0,
        "roomName": ""
      },
      null,
      null,
      null,
      null
    ]
  },
  "propConfig": {
    "custom.testCase": {
      "onChange": {
        "enabled": null,
        "script": "\t\n\tif currentValue:\n\t\t\n\t\ttry:\n\t\t\tcaseNo \u003d int(currentValue.value)\n\t\texcept:\n\t\t\tcaseNo \u003d -99\n\n\t\tcase \u003d \u0027case{}\u0027.format(caseNo)\n\t\tif case in self.custom.testdata:\n\t\t\tauxL \u003d self.custom.testdata[case]\n\t\t\t#self.params.value\u003d {\"args\": auxL}\n\t\t\tself.params.value\u003d auxL\n\t\telse:\n\t\t\tself.params.value\u003dNone\n"
      },
      "persistent": true
    },
    "custom.testdata": {
      "persistent": true
    },
    "params.inValue": {
      "access": "PUBLIC",
      "paramDirection": "input",
      "persistent": false
    },
    "params.value": {
      "onChange": {
        "enabled": null,
        "script": "\troot \u003d self.getChild(\"root\")\n\troot.setLabels()\t"
      },
      "paramDirection": "input",
      "persistent": true
    },
    "params.value.args": {
      "paramDirection": "input",
      "persistent": false
    }
  },
  "props": {
    "defaultSize": {
      "height": 28,
      "width": 210
    },
    "loading": {
      "mode": "blocking"
    }
  },
  "root": {
    "children": [
      {
        "meta": {
          "name": "Label_0"
        },
        "position": {
          "basis": "96%",
          "grow": 1
        },
        "props": {
          "alignVertical": "bottom",
          "style": {
            "classes": "Table/Cell_Dashboard_Small_NoBorder",
            "textAlign": "left"
          }
        },
        "type": "ia.display.label"
      },
      {
        "meta": {
          "name": "Label_1"
        },
        "position": {
          "basis": "1%"
        },
        "props": {
          "alignVertical": "bottom",
          "style": {
            "classes": "Table/Cell_Dashboard_Small_NoBorder",
            "textAlign": "center"
          }
        },
        "type": "ia.display.label"
      },
      {
        "meta": {
          "name": "Label_2"
        },
        "position": {
          "basis": "1%"
        },
        "props": {
          "alignVertical": "bottom",
          "style": {
            "classes": "Table/Cell_Dashboard_Small_NoBorder",
            "textAlign": "center"
          }
        },
        "type": "ia.display.label"
      },
      {
        "meta": {
          "name": "Label_3"
        },
        "position": {
          "basis": "1%"
        },
        "props": {
          "alignVertical": "bottom",
          "style": {
            "classes": "Table/Cell_Dashboard_Small_NoBorder",
            "textAlign": "center"
          }
        },
        "type": "ia.display.label"
      },
      {
        "meta": {
          "name": "Label_4"
        },
        "position": {
          "basis": "1%"
        },
        "props": {
          "alignVertical": "bottom",
          "style": {
            "classes": "Table/Cell_Dashboard_Small_NoBorder",
            "textAlign": "center"
          }
        },
        "type": "ia.display.label"
      }
    ],
    "meta": {
      "name": "root"
    },
    "props": {
      "style": {
        "overflow": "hidden",
        "paddingLeft": 50
      }
    },
    "scripts": {
      "customMethods": [
        {
          "name": "setLabels",
          "params": [],
          "script": "\t\n\tlabelNames \u003d [\u0027Label_{}\u0027.format(x) for x in range(5)]\n\tlabels \u003d [self.getChild(x) for x in labelNames]\n\t\n\tdef clean():\n\t\ti \u003d 0\n\t\tfor _l in labels:\n\t\t\t_l.props.text \u003d \u0027\u0027\n\t\t\t_l.position.basis \u003d \u002796%\u0027 if i \u003d\u003d 0 else \u00271%\u0027\t\n\t\t\t_l.props.style \u003d {\"classes\": \"Table/Cell_Dashboard_Small_NoBorder\"} # \"Table/Cell_Dashboard_NoBorder\"  #\n\t\t\ti +\u003d 1\t\n\n\tif self.view.params.value is None or self.view.params.value[0] is None:\n\t\tclean()\n\t\treturn\n\n\targs \u003d self.view.params.value\n\t\n\ti \u003d 0\n\tfor _l in labels:\n\t\tif \u0027bedId\u0027 in args[0]:\n\t\t\t_text \u003d args[i].get(\u0027bedNameNo\u0027,\u0027\u0027) if args[i] else \u0027\u0027\n\t\t\t_basis \u003d \u002720%\u0027 \n\t\t\t_alignVertical \u003d \u0027center\u0027\n\t\t\t\n\t\t\tif args[i] is None:\n\t\t\t\t_style \u003d {\"classes\": \"Table/Cell_Dashboard_Small_NoBorder\"}\n\t\t\telif args[i][\u0027bedState\u0027] in [0,1,2]:\n\t\t\t\t_cls \u003d \"Table/Cell_{}_Value\".format(args[i][\u0027bedState\u0027]) \n\t\t\t\t_style \u003d {\"classes\": _cls, \"textAlign\":\u0027center\u0027}\n\t\t\telse:\n\t\t\t\t# Not specified state\n\t\t\t\t_style \u003d {\"classes\": \"Table/Cell_Dashboard_Small_NoBorder\", \"backgroundColor\": \"red\"}\n\n\t\telif \u0027facilityName\u0027 in args[0]:\n\t\t\t_text \u003d args[0][\u0027facilityName\u0027] if i \u003d\u003d 0 else \u0027\u0027\n\t\t\t_basis \u003d \u002796%\u0027 if i \u003d\u003d 0 else \u00271%\u0027\n\t\t\t_style \u003d {\"classes\": \"Table/Cell_Dashboard_Small_NoBorder\"} # \"Table/Cell_Dashboard_NoBorder\" \n\t\t\t_style[\"textAlign\"] \u003d \"left\"if i \u003d\u003d 0 else \u0027center\u0027  \n\t\t\t_style[\"fontWeight\"] \u003d \"bold\"\n\t\t\t_alignVertical \u003d \u0027bottom\u0027\n\t\t\n\t\telif \u0027roomName\u0027 in args[0]:\n\t\t\t_text \u003d args[0][\u0027roomName\u0027] if i \u003d\u003d 0 else \u0027\u0027\n\t\t\t_basis \u003d \u002796%\u0027 if i \u003d\u003d 0 else \u00271%\u0027\n\t\t\t_style \u003d {\"classes\": \"Table/Cell_Dashboard_Small_NoBorder\"} # \"Table/Cell_Dashboard_NoBorder\" \n\t\t\t_style[\"textAlign\"] \u003d \"left\"if i \u003d\u003d 0 else \u0027center\u0027  \n\t\t\t_alignVertical \u003d \u0027bottom\u0027\n\n\t\telse:\n\t\t\t_text \u003d \u0027\u0027\n\t\t\t_basis \u003d \u002720%\u0027 \t\n\t\t\t_style \u003d {\"classes\": \"Table/Cell_Dashboard_Small_NoBorder\", \"backgroundColor\": \"red\"}\n\t\t\t_alignVertical \u003d \u0027center\u0027\n\n\t\t_l.props.text \u003d _text\n\t\t_l.position.basis \u003d _basis \t\n\t\t_l.props.style \u003d _style\t\n\t\t_l.props.alignVertical \u003d _alignVertical\n\n\n\t\ti +\u003d 1\n"
        },
        {
          "name": "openSideDock",
          "params": [
            "bedId"
          ],
          "script": "\tif bedId:\n\n\t\tnow \u003d system.date.format(self.getAsClientTime(system.date.now()))\n\t\tparams \u003d {\"bedId\": bedId, \"startDate\": now, \"endDate\": now}\n\t\tsystem.perspective.openDock(id\u003d\u0027PreviewAvailabilityBed\u0027 , params\u003dparams)\n\telse:\n\t\tpass"
        },
        {
          "name": "getAsClientTime",
          "params": [
            "datetimeInput"
          ],
          "script": "\ttimeClientOffset \u003d self.session.props.device.timezone.utcOffset - system.date.getTimezoneOffset()\n\ttimeClient \u003d system.date.addMinutes(datetimeInput,int(timeClientOffset*60))\n\t\n\treturn timeClient\n"
        },
        {
          "name": "closeSideDock",
          "params": [],
          "script": "\tif id:\n\t\ttry:\n\t\t\tsystem.perspective.closeDock(\u0027PreviewAvailabilityBed\u0027) \n\t\texcept:\n\t\t\tpass"
        }
      ],
      "extensionFunctions": null,
      "messageHandlers": []
    },
    "type": "ia.container.flex"
  }
}