{
  "custom": {},
  "events": {
    "system": {
      "onStartup": {
        "config": {
          "script": "\t\n\temvRoom \u003d self.getChild(\"root\").getChild(\"emvRoom\")\n\temvRoom.props.params.actionPerformedPulse \u003d False\n"
        },
        "scope": "G",
        "type": "script"
      }
    }
  },
  "params": {
    "version": 4
  },
  "propConfig": {
    "params.facilityId": {
      "paramDirection": "input",
      "persistent": true
    },
    "params.version": {
      "binding": {
        "config": {
          "path": "/root/emvVersion.props.params.version"
        },
        "type": "property"
      },
      "paramDirection": "output",
      "persistent": true
    }
  },
  "props": {
    "defaultSize": {
      "height": 30,
      "width": 1820
    }
  },
  "root": {
    "children": [
      {
        "meta": {
          "name": "emvFacility"
        },
        "position": {
          "basis": "400px"
        },
        "propConfig": {
          "props.params.actionPerformedPulse": {
            "onChange": {
              "enabled": null,
              "script": "\troot \u003d self.parent\n\t#facilityId \u003d self.props.params.selection\n\t#root.setRoomsDropdown(facilityId)\n\t#root.sendMsgCondition()\n"
            }
          },
          "props.params.selection": {
            "onChange": {
              "enabled": null,
              "script": "\troot \u003d self.parent\n\tfacilityId \u003d self.props.params.selection\n\troot.setRoomsDropdown(facilityId)\n\t#root.sendMsgCondition()"
            }
          }
        },
        "props": {
          "params": {
            "actionPerformedPulse": false,
            "clear": false,
            "multiSelect": false,
            "options": [
              {
                "label": "Apartments",
                "value": 1
              },
              {
                "label": "Hallway",
                "value": 3
              },
              {
                "label": "Next Steps Dorm",
                "value": 4
              },
              {
                "label": "Night Shift Dorm",
                "value": 5
              },
              {
                "label": "Respite Dorm (Men)",
                "value": 6
              },
              {
                "label": "Respite Dorm (Women)",
                "value": 7
              },
              {
                "label": "Special Dorm",
                "value": 8
              },
              {
                "label": "Supportive Living Dorm A and B",
                "value": 9
              },
              {
                "label": "Supportive Living Dorm C",
                "value": 10
              },
              {
                "label": "Test Shelter 1",
                "value": 21
              },
              {
                "label": "Test Shelter 2",
                "value": 23
              },
              {
                "label": "Veteran Service Intensive Dorm",
                "value": 11
              },
              {
                "label": "Veteran\u0027s Dorm",
                "value": 12
              },
              {
                "label": "Vine Hill",
                "value": 13
              },
              {
                "label": "Welcome Dorm",
                "value": 14
              },
              {
                "label": "Women\u0027s Welcome Dorm",
                "value": 15
              }
            ],
            "placeholder": "(Select)",
            "selection": null
          },
          "path": "Providers/Dashboard/Components/Filters/Conditional_DropDown",
          "style": {
            "classes": "Filter/Filter_Container"
          }
        },
        "type": "ia.display.view"
      },
      {
        "meta": {
          "name": "emvRoom"
        },
        "position": {
          "basis": "400px"
        },
        "propConfig": {
          "props.params.actionPerformedPulse": {
            "onChange": {
              "enabled": null,
              "script": "\troot \u003d self.parent\n\t#root.sendMsgCondition()\n"
            }
          },
          "props.params.selection": {
            "onChange": {
              "enabled": null,
              "script": "\tself.parent.sendMsgToClear()"
            }
          }
        },
        "props": {
          "params": {
            "actionPerformedPulse": false,
            "clear": false,
            "multiSelect": false,
            "options": [],
            "placeholder": "",
            "selection": null
          },
          "path": "Providers/Dashboard/Components/Filters/Conditional_DropDown",
          "style": {
            "classes": "Filter/Filter_Container"
          }
        },
        "type": "ia.display.view"
      },
      {
        "events": {
          "component": {
            "onActionPerformed": {
              "config": {
                "script": "\troot \u003d self.parent\n\troot.sendMsgCondition()"
              },
              "scope": "G",
              "type": "script"
            }
          }
        },
        "meta": {
          "name": "Button"
        },
        "position": {
          "basis": "160px"
        },
        "propConfig": {
          "props.text": {
            "binding": {
              "config": {
                "expression": "if(!isNull({../emvRoom.props.params.selection}),\"Set Room Layout\",if(!isNull({../emvFacility.props.params.selection}),\"Set Facility Layout\",\"Set Global Layout\"))\r\n"
              },
              "type": "expr"
            }
          }
        },
        "type": "ia.input.button"
      },
      {
        "meta": {
          "name": "Placeholder"
        },
        "position": {
          "basis": "100px",
          "grow": 1
        },
        "props": {
          "path": "1_TEMPLATES/Filtering/Filter_Placeholder"
        },
        "type": "ia.display.view"
      },
      {
        "meta": {
          "name": "emvVersion"
        },
        "position": {
          "basis": "200px",
          "grow": 1
        },
        "propConfig": {
          "props.params.actionPerformedPulse": {
            "onChange": {
              "enabled": null,
              "script": "\tself.getSibling(\"emvRoom\").props.params.clear \u003d True"
            }
          }
        },
        "props": {
          "params": {
            "actionPerformedPulse": false,
            "version": 4
          },
          "path": "Shelter/Room Layout/Components/Filters/Version_Mtb"
        },
        "type": "ia.display.view"
      }
    ],
    "custom": {
      "_devClean": false,
      "_devPulse": true,
      "_isDev": true
    },
    "meta": {
      "name": "root"
    },
    "propConfig": {
      "custom._devClean": {
        "onChange": {
          "enabled": null,
          "script": "\t\n\temvRoom \u003d self.getChild(\"emvRoom\")\n\t\n\temvRoom.props.params.clear \u003d True\n\n\t\n\tif self.custom._devClean:\n\t\tself.custom._devClean \u003d False"
        }
      },
      "custom._devPulse": {
        "onChange": {
          "enabled": null,
          "script": "\t\n\temvFacility \u003d self.getChild(\"emvFacility\")\n\temvRoom \u003d self.getChild(\"emvRoom\")\n\t\n\tif self.custom._isDev:\n\t\tif currentValue.value is True:\n\t\t\tself.setFacilityDropdown()\n\t\t\temvRoom.props.params.options \u003d []\n\t\telse:\n\t\t\temvFacility.props.params.options \u003d []\n\t\t\temvRoom.props.params.options \u003d []\n\t\n\temvRoom.props.params.actionPerformedPulse \u003d False\n"
        }
      }
    },
    "props": {
      "style": {
        "classes": "Filter/Header_Text"
      }
    },
    "scripts": {
      "customMethods": [
        {
          "name": "sendMsgCondition",
          "params": [
            "payload\u003dNone"
          ],
          "script": "\t\n\temvFacility \u003d self.getChild(\"emvFacility\")\n\temvRoom \u003d self.getChild(\"emvRoom\")\n\tsystem.perspective.print((\u0027sndmsg:\u0027,payload))\n\t\n\temvVersion\u003d self.getChild(\"emvVersion\")\n\tif payload is None:\n\t\tpayload \u003d {}\n\t\tpayload[\u0027oneDay\u0027] \u003d system.date.now()\n\n\t\tpayload[\u0027roomId\u0027] \u003d emvRoom.props.params.selection\n\t\t\n\t\tif not(payload[\u0027roomId\u0027]):\n\t\t\tpayload[\u0027facilityId\u0027] \u003d emvFacility.props.params.selection \t\t\n\n\tsystem.perspective.print((\u0027mhSetLayoutDesigner\u0027,payload)) \n\n\tsystem.perspective.sendMessage(\u0027mhSetLayoutDesigner\u0027, payload \u003d payload)\n\t\n"
        },
        {
          "name": "sendMsgToClear",
          "params": [],
          "script": "\tsystem.perspective.sendMessage(\u0027mhSetLayoutDesigner\u0027, payload \u003d None)\n"
        },
        {
          "name": "setFacilityDropdown",
          "params": [],
          "script": "\temvFacility \u003d self.getChild(\"emvFacility\")\n\tquery \u003d \"\"\"\nSELECT \n\t [id]\n\t,[facilityName]\nFROM [RITIOps].[lodging].[Facility]\nWHERE [timeRetired] IS NULL\nORDER BY [facilityName]\"\"\"\t\t\t\n\t\n\tresult \u003d system.db.runPrepQuery(query,[],\u0027RITIOps\u0027)\n\temvFacility.props.params.options \u003d [{\u0027value\u0027:row[\u0027id\u0027],\u0027label\u0027:row[\u0027facilityName\u0027]} for row in result]\n\t"
        },
        {
          "name": "setRoomsDropdown",
          "params": [
            "facilityId"
          ],
          "script": "\tsystem.perspective.print((\u0027facilityId: \u0027,facilityId))\n\t\n\temvRoom \u003d self.getChild(\"emvRoom\")\n\tquery \u003d \"\"\"\nDECLARE @facilityId int \u003d ?;\nSELECT \n\t [id]\n\t,[roomName]\nFROM [RITIOps].[lodging].[Room]\nWHERE [timeRetired] IS NULL\n\tAND [facilityId] \u003d @facilityId \n\tAND @facilityId IS NOT NULL\nORDER BY [facilityId], [roomName]\"\"\"\t\t\t\n\t\n\tresult \u003d system.db.runPrepQuery(query,[facilityId],\u0027RITIOps\u0027)\n\temvRoom.props.params.options \u003d [{\u0027value\u0027:row[\u0027id\u0027],\u0027label\u0027:row[\u0027roomName\u0027]} for row in result]\n\temvRoom.props.params.clear \u003d True"
        }
      ],
      "extensionFunctions": null,
      "messageHandlers": [
        {
          "messageType": "XrefreshProviderTableFromFilter",
          "pageScope": true,
          "script": "\tself.sendMsgCondition()",
          "sessionScope": false,
          "viewScope": false
        }
      ]
    },
    "type": "ia.container.flex"
  }
}