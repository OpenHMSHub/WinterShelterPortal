{
  "custom": {},
  "params": {
    "filter": "%",
    "selectedCategories": []
  },
  "propConfig": {
    "params.filter": {
      "paramDirection": "input",
      "persistent": true
    },
    "params.selectedCategories": {
      "paramDirection": "input",
      "persistent": true
    }
  },
  "props": {
    "defaultSize": {
      "height": 897
    }
  },
  "root": {
    "children": [
      {
        "children": [
          {
            "events": {
              "component": {
                "onEventClick": {
                  "config": {
                    "script": "\t\"\"\"evts \u003d self.props.events\n\tisInstance \u003d False\n\tfor evt in events:\n\t\tevtID \u003d evt[\u0027id\u0027]\n\t\tif evtID !\u003d event.id:\n\t\t\tcontinue\n\t\t\t\n\t\tinstanceID \u003d evt[\u0027instanceID\u0027]\n\t\tif instanceID is not None:\n\t\t\tisInstance \u003d True\n\t\tbreak\n\t\n\tif isInstance \u003d\u003d True:\n\t\t#prompt user if they want to edit the series or the instance\n\t\t#if they select instance, open the instance editor\n\t\t#if they select series, open the series editor\n\t\t#system.perspective.\n\t\tpass\"\"\"\n\t\n\tfullEvent \u003d self.props.events[int(event.id)]\n\tif \"instanceID\" not in fullEvent or fullEvent[\"instanceID\"] is None:\n\t\t#Create Instance in Database and retreive instanceID\n\t\tinstanceID \u003d 0\n\t\tpass\n\t\t\n\telse:\n\t\tinstanceID \u003d fullEvent[\"instanceID\"]\n\t\n\tsystem.perspective.navigate(\"/Events/Detail/\" + str(instanceID))\n\t#system.perspective.navigate(\"/Events/Detail/\" + str(self.props.events[70].eventID))-----(TIGA Prasanna)\n\t"
                  },
                  "scope": "G",
                  "type": "script"
                }
              }
            },
            "meta": {
              "name": "calendar"
            },
            "position": {
              "basis": "600px",
              "grow": 1
            },
            "propConfig": {
              "custom.eventObjects_new": {
                "access": "PRIVATE",
                "binding": {
                  "config": {
                    "path": "this.custom.filteredEvents_new"
                  },
                  "transforms": [
                    {
                      "code": "\t#\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\n\t#Written by Benjamin Sperl on 18April2021. Benjamin.sperl@rovisys.com\n\t#\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\n\t\n\t\n\t#\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\n\t#This function adds an item to a dictionary if the value is not none\n\t#\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\n\tdef addIfNotNone(dict, value, key):\n\t\tif not value is None:\n\t\t\tdict[key] \u003d value\n\t\treturn dict\n\t\n\t#\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\n\t#This function returns a string formatted for the rrule string. Returns \u0027\u0027 if the value is \u0027\u0027 or none\n\t#\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\n\tdef getRruleString(name, value):\n\t\tif value is None or value \u003d\u003d \u0027\u0027:\n\t\t\treturn \u0027\u0027\n\t\telse:\n\t\t\treturn \u0027;\u0027 + name + \u0027\u003d\u0027 + str(value)\n\t\t\t\n\t#\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\n\t#This function returns a string for the byweekday property formatted for the rrule string. Returns \u0027\u0027 if none of the weekdays are used\n\t#\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\n\tdef getByWeekDayString(row):\n\t\tseparator \u003d \u0027\u0027\n\t\trruleString \u003d \u0027\u0027\n\t\tisUsedFlag \u003d False\n\t\tfor weekday in [\u0027monday\u0027, \u0027tuesday\u0027, \u0027wednesday\u0027, \u0027thursday\u0027, \u0027friday\u0027, \u0027saturday\u0027, \u0027sunday\u0027]:\n\t\t\tif value.getValueAt(row, weekday):\n\t\t\t\trruleString \u003d rruleString + separator + weekday[0:2].upper()\n\t\t\t\tseparator \u003d \u0027,\u0027\n\t\t\t\tisUsedFlag \u003d True\n\t\t\t\t\n\t\tif isUsedFlag:\n\t\t\treturn \u0027;BYWEEKDAY\u003d\u0027 + rruleString\n\t\treturn \u0027\u0027\n\t\n\t#\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\n\t#This function transforms boolean values for every day of week into the array format used by the calendar\n\t#\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\n\tdef getByWeekDay(rrule, row):\n\t\tweekDayDict \u003d {}\n\t\tweekDayDict[\u0027mo\u0027] \u003d value.getValueAt(row, \"monday\")\n\t\tweekDayDict[\u0027tu\u0027] \u003d value.getValueAt(row, \"tuesday\")\n\t\tweekDayDict[\u0027we\u0027] \u003d value.getValueAt(row, \"wednesday\")\n\t\tweekDayDict[\u0027th\u0027] \u003d value.getValueAt(row, \"thursday\")\n\t\tweekDayDict[\u0027fr\u0027] \u003d value.getValueAt(row, \"friday\")\n\t\tweekDayDict[\u0027sa\u0027] \u003d value.getValueAt(row, \"saturday\")\n\t\tweekDayDict[\u0027su\u0027] \u003d value.getValueAt(row, \"sunday\")\n\t\t\n\t\tbyweekday \u003d []\n\t\tfor key in weekDayDict:\n\t\t\tif weekDayDict[key]:\n\t\t\t\tbyweekday.append(key)\n\t\t\n\t\tif len(byweekday) !\u003d 0:\n\t\t\trrule[\u0027byweekday\u0027] \u003d byweekday\n\t\t\n\t\treturn rrule\n\t\n\t#\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\n\t#Main Function\n\t#\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\n\t\n\t#define an empty array which will contain all the events and be returned at the end\n\tarray \u003d []\n\t\n\t#define an idCounter which will give a unique id number to every event. We don\u0027t use the eventId or instanceId because an eventId and an instanceId could be the same. \n\tidCounter \u003d 0\n\t\n\t#loop through every row in the event table\n\tfor row in range(value.getRowCount()):\n\t\t#define an empty dictionary for the event\n\t\tevt \u003d {}\n\t\t\n\t\t#get values which control flow or are used in all program paths but may be used differently\n\t\tfreq \u003d value.getValueAt(row, \"freq\").upper()\n\t\tstartDate \u003d value.getValueAt(row, \"startDate\")\n\t\tendDate \u003d value.getValueAt(row, \"endDate\")\n\t\t\n\t\t#add the values to the event which are independent of the rest of the flow of the program\n\t\tevt[\"allDay\"] \u003d value.getValueAt(row, \"allDay\")\n\t\tevt[\"backgroundColor\"] \u003d \"#d41800\"\n\t\tevt[\"textColor\"] \u003d \"#ffffff\"\n\t\tevt[\"title\"] \u003d value.getValueAt(row, \"title\")\n\t\tevt[\"eventID\"] \u003d eventID \u003d value.getValueAt(row, \"eventID\")\n\t\tevt[\"instanceID\"] \u003d None\n\t\t\n\t\t#copy the values from the event dictionary to a new dictionary which will be used if the event has any instances\n\t\tinstanceEvt \u003d evt.copy()\n\t\t\n\t\t#update the id number in the event dictionary. Don\u0027t update yet in the instanceEvt dictionary\n\t\tevt[\"id\"] \u003d idCounter\n\t\t\n\t\t#query for all the instances for the current event\n\t\tinstances \u003d system.db.runNamedQuery(\u0027Calendar/EventInstance/GetEventInstances\u0027, {\u0027eventID\u0027: eventID})\n\t\t\n\t\t#if the event does not recur at all\n\t\tif freq \u003d\u003d \"ONCE\":\n\t\t\tinstancesCount \u003d instances.getRowCount()\n\t\t\t\n\t\t\t#if there are no instances associated with the event\n\t\t\tif instancesCount is None or instancesCount \u003d\u003d 0:\n\t\t\t\t#set the event start and end properties\n\t\t\t\tevt[\"start\"] \u003d system.date.format(startDate, \u0027yyyy-MM-dd HH:mm:ss\u0027)\n\t\t\t\tevt[\"end\"] \u003d system.date.format(endDate, \u0027yyyy-MM-dd HH:mm:ss\u0027)\n\t\t\t\t\n\t\t\t#if there is an instance associated with the event. A \"once\" event cannot / should not have more than one instance so it only looks at the first row\n\t\t\telse:\n\t\t\t\t#set the start and end properties with the instance values\n\t\t\t\tevt[\u0027start\u0027] \u003d system.date.format(instances.getValueAt(0, \"startDate\"), \u0027yyyy-MM-dd HH:mm:ss\u0027)\n\t\t\t\tevt[\"end\"] \u003d system.date.format(instances.getValueAt(0, \"endDate\"), \u0027yyyy-MM-dd HH:mm:ss\u0027)\n\t\t\t\tevt[\"instanceID\"] \u003d instances.getValueAt(0, \"instanceID\")\n\t\t\t\t\n\t\t#if the event does recur\n\t\telse:\n\t\t\t#build an rrule string.\t\t\n\t\t\tdtstart \u003d system.date.format(startDate, \u0027yyyyMMdd\u0027) + \u0027T\u0027 + system.date.format(startDate, \u0027HHmmss\u0027) + \u0027Z\u0027\n\t\t\tuntil \u003d system.date.format(endDate, \u0027yyyyMMdd\u0027) + \u0027T\u0027 + system.date.format(endDate, \u0027HHmmss\u0027) + \u0027Z\u0027\n\t\t\tinterval \u003d value.getValueAt(row, \"interval\")\n\t\t\tbyMonth \u003d value.getValueAt(row, \"bymonth\")\n\t\t\tbySetPos \u003d value.getValueAt(row, \"bysetpos\")\n\t\t\t\n\t\t\trrule \u003d \u0027DTSTART:\u0027 + dtstart + \u0027\\\\nRRULE:FREQ\u003d\u0027 + freq + \u0027;UNTIL\u003d\u0027 + until + getRruleString(\u0027INTERVAL\u0027, interval) + getByWeekDayString(row) + getRruleString(\u0027BYMONTH\u0027, byMonth) + getRruleString(\u0027BYSETPOS\u0027, bySetPos)\n\t\t\t\n\t\t\t#loop through all the instances for the event\n\t\t\tfor row in range(instances.getRowCount()):\n\t\t\t\t#get instance values and increment idCounter\n\t\t\t\tinstanceStartDate \u003d instances.getValueAt(row, \"startDate\")\n\t\t\t\tinstanceEndDate \u003d instances.getValueAt(row, \"endDate\")\n\t\t\t\tinstanceStartDateString \u003d system.date.format(instanceStartDate, \u0027yyyy-MM-dd HH:mm:ss\u0027)\n\t\t\t\tinstanceEndDateString \u003d system.date.format(instanceEndDate, \u0027yyyy-MM-dd HH:mm:ss\u0027)\n\t\t\t\tinstanceID \u003d instances.getValueAt(row, \"instanceID\")\n\t\t\t\tidCounter \u003d idCounter + 1\n\t\t\t\t\n\t\t\t\t#Add an exdate property to the parent event rrule string. This keeps the recurring event from showing these dates\n\t\t\t\t#the instances will have a separate event object instead\n\t\t\t\trrule \u003d rrule + \u0027\\\\nEXDATE:\u0027 + system.date.format(instanceStartDate, \u0027yyyyMMdd\u0027) + \u0027T\u0027 + system.date.format(instanceStartDate, \u0027HHmmss\u0027) + \u0027Z\u0027\n\t\t\t\t\n\t\t\t\t#update the values in the instance event object and add to the array\n\t\t\t\tinstanceEvt[\"id\"] \u003d idCounter\n\t\t\t\tinstanceEvt[\u0027start\u0027] \u003d instanceStartDateString\n\t\t\t\tinstanceEvt[\"end\"] \u003d instanceEndDateString\n\t\t\t\tinstanceEvt[\"instanceID\"] \u003d instanceID\n\t\t\t\tarray.append(instanceEvt)\n\t\t\t\n\t\t\t#add the rrule object to the event dictionary and increment id counter\n\t\t\tevt[\"rrule\"] \u003d rrule\n\t\t\tidCounter \u003d idCounter + 1\n\t\t\n\t\t#add the event dictionary to the array which will be returned\n\t\tarray.append(evt)\n\tfor i, item in enumerate(array):\n\t\titem[\"id\"] \u003d i\n\treturn array",
                      "type": "script"
                    }
                  ],
                  "type": "property"
                },
                "persistent": false
              },
              "custom.eventObjects_old": {
                "access": "PRIVATE",
                "binding": {
                  "config": {
                    "path": "this.custom.filteredEvents_old"
                  },
                  "transforms": [
                    {
                      "code": "\tdef addIfNotNone(dict, value, key):\n\t\tif not value is None:\n\t\t\tdict[key] \u003d value\n\t\treturn dict\n\t\n\tdef getByWeekDay(rrule, row):\n\t\tweekDayDict \u003d {}\n\t\tweekDayDict[\u0027mo\u0027] \u003d value.getValueAt(row, \"monday\")\n\t\tweekDayDict[\u0027tu\u0027] \u003d value.getValueAt(row, \"tuesday\")\n\t\tweekDayDict[\u0027we\u0027] \u003d value.getValueAt(row, \"wednesday\")\n\t\tweekDayDict[\u0027th\u0027] \u003d value.getValueAt(row, \"thursday\")\n\t\tweekDayDict[\u0027fr\u0027] \u003d value.getValueAt(row, \"friday\")\n\t\tweekDayDict[\u0027sa\u0027] \u003d value.getValueAt(row, \"saturday\")\n\t\tweekDayDict[\u0027su\u0027] \u003d value.getValueAt(row, \"sunday\")\n\t\t\n\t\tbyweekday \u003d []\n\t\tfor key in weekDayDict:\n\t\t\tif weekDayDict[key]:\n\t\t\t\tbyweekday.append(key)\n\t\t\n\t\tif len(byweekday) !\u003d 0:\n\t\t\trrule[\u0027byweekday\u0027] \u003d byweekday\n\t\t\n\t\treturn rrule\n\t\n\tarray \u003d []\n\ttimeZone \u003d system.date.getTimezone()\n\t\n\tfor row in range(value.getRowCount()):\n\t\tevt \u003d {}\n\t\t\n\t\tfreq \u003d value.getValueAt(row, \"freq\")\n\t\t\n\t\tstartDate \u003d value.getValueAt(row, \"startDate\")\n\t\tendDate \u003d value.getValueAt(row, \"endDate\")\n\t\t\n\t\tevt[\"allDay\"] \u003d value.getValueAt(row, \"allDay\")\n\t\tevt[\"backgroundColor\"] \u003d \"#d41800\"\n\t\tevt[\"textColor\"] \u003d \"#ffffff\"\n\t\tevt[\"id\"] \u003d value.getValueAt(row, \"instanceID\")\n\t\tevt[\"title\"] \u003d value.getValueAt(row, \"title\")\n\n\n\t\tevt[\"start\"] \u003d system.date.format(startDate, \u0027yyyy-MM-dd HH:mm:ss\u0027)\n\t\tevt[\"end\"] \u003d system.date.format(endDate, \u0027yyyy-MM-dd HH:mm:ss\u0027)\n\t\t\n\n\t\tarray.append(evt)\n\t\n\treturn array",
                      "type": "script"
                    }
                  ],
                  "type": "property"
                }
              },
              "custom.events_new": {
                "access": "PRIVATE",
                "binding": {
                  "config": {
                    "queryPath": "Calendar/GetEvents"
                  },
                  "type": "query"
                }
              },
              "custom.events_old": {
                "access": "PRIVATE",
                "binding": {
                  "config": {
                    "parameters": {
                      "category": "\"%\""
                    },
                    "queryPath": "Calendar/EventInstance/GetEventInstancesCalendar"
                  },
                  "type": "query"
                }
              },
              "custom.filteredEvents_new": {
                "access": "PRIVATE",
                "binding": {
                  "config": {
                    "struct": {
                      "filters": "{view.params.selectedCategories}",
                      "source": "hasChanged({this.custom.events_new})"
                    },
                    "waitOnAll": true
                  },
                  "transforms": [
                    {
                      "code": "\tdataset \u003d self.custom.events_new\n\tfilteredDataset \u003d dataset \n\theaders \u003d [str(x) for x in filteredDataset.getColumnNames()]\n\tfilters \u003d value[\u0027filters\u0027]\n\t\n\tif not filters : \n\t\treturn filteredDataset\n\t\t\n\treturnDataset \u003d []\n\tfor row in range(filteredDataset.getRowCount()):\n\t\toneRow \u003d [] \n\t\tcell \u003d filteredDataset.getValueAt(row,\"Category\")\n\t\tif cell !\u003d None and cell:\n\t\t\tfor filter in filters:\n\t\t\t\tif filter \u003d\u003d cell:\n\t\t\t\t\tfor x in range(filteredDataset.getColumnCount()):\n\t\t\t\t\t\toneRow.append(filteredDataset.getValueAt(row,x))\n\t\t\t\t\treturnDataset.append(oneRow)\n\t\t\t\t\tbreak\n\tfilteredDataset \u003d system.dataset.toDataSet(headers,returnDataset)\n\t\n\treturn filteredDataset",
                      "type": "script"
                    }
                  ],
                  "type": "expr-struct"
                }
              },
              "custom.filteredEvents_old": {
                "access": "PRIVATE",
                "binding": {
                  "config": {
                    "struct": {
                      "filters": "{view.params.selectedCategories}",
                      "source": "hasChanged({this.custom.events_old})"
                    },
                    "waitOnAll": true
                  },
                  "transforms": [
                    {
                      "code": "\tdataset \u003d self.custom.events_old\n\tfilteredDataset \u003d dataset \n\theaders \u003d [str(x) for x in filteredDataset.getColumnNames()]\n\tfilters \u003d value[\u0027filters\u0027]\n\t\n\tif not filters : \n\t\treturn filteredDataset\n\t\t\n\treturnDataset \u003d []\n\tfor row in range(filteredDataset.getRowCount()):\n\t\toneRow \u003d [] \n\t\tcell \u003d filteredDataset.getValueAt(row,\"Category\")\n\t\tif cell !\u003d None and cell:\n\t\t\tfor filter in filters:\n\t\t\t\tif filter \u003d\u003d cell:\n\t\t\t\t\tfor x in range(filteredDataset.getColumnCount()):\n\t\t\t\t\t\toneRow.append(filteredDataset.getValueAt(row,x))\n\t\t\t\t\treturnDataset.append(oneRow)\n\t\t\t\t\tbreak\n\tfilteredDataset \u003d system.dataset.toDataSet(headers,returnDataset)\n\t\t\n\t\n\treturn filteredDataset",
                      "type": "script"
                    }
                  ],
                  "type": "expr-struct"
                }
              },
              "props.events": {
                "binding": {
                  "config": {
                    "path": "this.custom.eventObjects_new"
                  },
                  "type": "property"
                }
              }
            },
            "props": {
              "currentCalendarDate": {
                "currentDateEnd": "2021-08-01 00:00:00",
                "currentDateStart": "2021-07-01 00:00:00",
                "date": 1,
                "displayDateEnd": "2021-08-08 00:00:00",
                "displayDateStart": "2021-06-27 00:00:00",
                "month": 6,
                "title": "July 2021",
                "week": 26,
                "year": 2021
              },
              "dateAndTimeDisplay": {
                "slotDuration": "0:30:00"
              },
              "selectable": true,
              "selectedDate": {
                "end": "2021-05-06 00:00:00",
                "start": "2021-05-05 00:00:00"
              },
              "style": {
                "classes": "Text/About_info"
              },
              "toolbar": {
                "footer": {
                  "center": "",
                  "left": "",
                  "right": ""
                }
              },
              "viewProperties": {
                "list": {
                  "listDayAltFormat": null
                }
              }
            },
            "scripts": {
              "customMethods": [],
              "extensionFunctions": null,
              "messageHandlers": [
                {
                  "messageType": "CreateCalendarEvent",
                  "pageScope": true,
                  "script": "\tself.refreshBinding(\"custom.events_new\")\n\tself.refreshBinding(\"custom.filteredEvents_new\")\n\tself.refreshBinding(\"custom.eventObjects_new\")\n\t#self.refreshBinding(\"props.events\")",
                  "sessionScope": true,
                  "viewScope": false
                }
              ]
            },
            "type": "bijc.display.calendar"
          }
        ],
        "meta": {
          "name": "FlexContainer"
        },
        "position": {
          "grow": 1
        },
        "props": {
          "direction": "column",
          "wrap": "wrap"
        },
        "type": "ia.container.flex"
      }
    ],
    "meta": {
      "name": "root"
    },
    "props": {
      "direction": "column"
    },
    "type": "ia.container.flex"
  }
}