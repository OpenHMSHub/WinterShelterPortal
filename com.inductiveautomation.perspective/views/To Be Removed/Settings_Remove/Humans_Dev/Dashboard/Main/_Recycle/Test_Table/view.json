{
  "custom": {},
  "events": {
    "system": {
      "onStartup": {
        "config": {
          "script": "\ttry:\n\t\tsystem.perspective.sendMessage(\u0027mhByConditionAndFilter\u0027, payload \u003d{})\n\n\texcept:\n\t\timport traceback\n\t\tlogger \u003d system.util.getLogger(\"{}\".format(\u0027Providers_Table onStartUp\u0027))\n\t\tmsg \u003d traceback.format_exc()\n\t\tlogger.error(msg)\t\n\n"
        },
        "scope": "G",
        "type": "script"
      }
    }
  },
  "params": {},
  "props": {
    "defaultSize": {
      "height": 620,
      "width": 1200
    }
  },
  "root": {
    "children": [
      {
        "custom": {
          "_devPayload": {
            "raceids": [
              2,
              8
            ],
            "searchByColumns": {
              "first_name": "ess",
              "last_name": null
            },
            "year": null
          },
          "_devPulse": true,
          "_devSearchAll": false,
          "_devTypeUtil": false,
          "dataSearchFalse": {
            "$": [
              "ds",
              192,
              1619379631966
            ],
            "$columns": [
              {
                "data": [],
                "name": "id",
                "type": "Integer"
              },
              {
                "data": [],
                "name": "first_name",
                "type": "String"
              },
              {
                "data": [],
                "name": "middle_name",
                "type": "String"
              },
              {
                "data": [],
                "name": "last_name",
                "type": "String"
              },
              {
                "data": [],
                "name": "suffix",
                "type": "String"
              },
              {
                "data": [],
                "name": "nick_name",
                "type": "String"
              },
              {
                "data": [],
                "name": "ssn",
                "type": "String"
              },
              {
                "data": [],
                "name": "gender_id",
                "type": "Integer"
              },
              {
                "data": [],
                "name": "gender",
                "type": "String"
              },
              {
                "data": [],
                "name": "dob",
                "type": "Date"
              },
              {
                "data": [],
                "name": "race_id",
                "type": "Integer"
              },
              {
                "data": [],
                "name": "race",
                "type": "String"
              },
              {
                "data": [],
                "name": "disability_id",
                "type": "Integer"
              },
              {
                "data": [],
                "name": "disability",
                "type": "String"
              },
              {
                "data": [],
                "name": "veteran_id",
                "type": "Integer"
              },
              {
                "data": [],
                "name": "veteran",
                "type": "String"
              },
              {
                "data": [],
                "name": "participant_id",
                "type": "Integer"
              },
              {
                "data": [],
                "name": "participant_retired",
                "type": "Date"
              },
              {
                "data": [],
                "name": "employee_id",
                "type": "Integer"
              },
              {
                "data": [],
                "name": "employee_retired",
                "type": "Date"
              },
              {
                "data": [],
                "name": "volunteer_id",
                "type": "Integer"
              },
              {
                "data": [],
                "name": "volunteer_retired",
                "type": "Date"
              }
            ]
          }
        },
        "events": {
          "component": {
            "onRowClick": {
              "config": {
                "script": "\timport traceback\n\ttry:\n\t\tselectedColumn \u003d self.props.selection.selectedColumn\n\t\t#system.perspective.print(selectedColumn)\n\n\t\tif selectedColumn \u003d\u003d \"id\":\n\t\t\ttrackID \u003d self.props.data.getValueAt(event.row, \u0027id\u0027)\n\t\t\t\n\t\t\tif trackID is None:\n\t\t\t\treturn\n\t\t\t\n\t\t\tid \u003d \"PreviewProvider\" \n\t\t\tparams \u003d {\"trackID\":trackID}\n\t\t\tsystem.perspective.openDock(id\u003did,params\u003dparams)\n\n\t\telif selectedColumn \u003d\u003d \"providerName\":\n\t\t\t#Display the detail screen\n\t\t\ttrackID \u003d self.props.data.getValueAt(event.row, \u0027id\u0027)\n\t\t\t\n\t\t\tsystem.perspective.print((\u0027trackID, tabID:\u0027, trackID))\n\t\t\t\n\t\t\t# If we have dummy Row return\n\t\t\tif trackID is None:\n\t\t\t\treturn\t\t\n\t\t\t\t\t\n\t\t\ttab_id \u003d 1\n\t\t\tsystem.perspective.navigate(\"Providers/Details/\" + str(trackID) + \"/\" + str(tab_id))\n\t\t\t#system.perspective.navigate(\"Providers/Details\", params \u003d {\u0027trackID\u0027:trackID,  \u0027tab_id\u0027: tab_id})\n\t\t\t#system.perspective.navigate(\"Providers\", params \u003d {\u0027trackID\u0027:trackID,  \u0027tab_id\u0027: tab_id})\n\n\t\t\t#if selectedColumn \u003d\u003d \"ShelterName\": \n\t\t\t\t##Display the detail screen\n\t\t\t\t#shelterID \u003d self.props.selection.data[0][\u0027id\u0027]\n\t\t\t\t#system.perspective.navigate(view \u003d \u0027Shelter/Detail/Shelter_Detail\u0027, params \u003d {\u0027shelterID\u0027:shelterID})\n\n\n\t\telse:\n\t\t\tpass\n\texcept:\n\t\tlogger \u003d system.util.getLogger(\"Provider Dashboard Providers_table OnRowClick\")\n\t\tmsg \u003d traceback.format_exc()\n\t\tlogger.error(msg)\n"
              },
              "scope": "G",
              "type": "script"
            }
          }
        },
        "meta": {
          "name": "Table"
        },
        "position": {
          "basis": "100%"
        },
        "propConfig": {
          "custom._devPulse": {
            "onChange": {
              "enabled": null,
              "script": "\t#if previousValue is None:\n\t\t#return\n\t\t\n\tif currentValue.value is True:\n\t\tpayload \u003d {}\n\t\tpayload[\u0027raceIds\u0027] \u003d [2,3,4,8] #None #[1,3] # self.custom._devArr #3 # [0,2]\n\t\tpayload[\u0027year\u0027] \u003d None\n\t\t#payload[\u0027searchFirstName\u0027] \u003d \u0027Andre\u0027\n\t\t#payload[\u0027activityRange\u0027] \u003d system.date.getDate(2021,0,1)\n\t\t#payload[\u0027activityRange\u0027] \u003d system.date.getDate(2021,1,1)\n\t\t#payload[\u0027countReferralFromTo\u0027] \u003d [0,1]\n\t\t#payload[\u0027searchText\u0027] \u003d self.custom._devSearchText\n\t\t\n\t\tsystem.perspective.sendMessage(\u0027mhByConditionAndFilter\u0027, payload \u003d payload)\n\t\tself.custom.dataSearchFalse \u003d system.dataset.clearDataset(self.custom.dataSearchFalse)\n\telse:\n\t\tself.props.data \u003d system.dataset.clearDataset(self.props.data)\n\t\tself.custom.dataSearchFalse \u003d system.dataset.clearDataset(self.custom.dataSearchFalse)\n"
            }
          },
          "custom._devSearchAll": {
            "onChange": {
              "enabled": null,
              "script": "\tif currentValue.value is True:\n\t\tpayload \u003d self.custom._devPayload\n\t\t_x \u003d \"\"\"\n\t\tpayload \u003d {}\n\t\t\n\t\tpayload[\u0027raceIds\u0027] \u003d [1,2,4,8]\n\t\tpayload[\u0027year\u0027] \u003d None\n\t\t\n\t\t_dict \u003d {}\n\t\t_dict[\u0027first_name\u0027] \u003d \u0027dr\u0027\n\t\t_dict[\u0027last_name\u0027] \u003d \u0027t3\u0027\n\t\t_dict[\u0027middle_name\u0027] \u003d \u0027\u0027\n\t\t_dict[\u0027nick_name\u0027] \u003d \u0027\u0027\n\t\t_dict[\u0027ssn\u0027] \u003d \u0027\u0027\n\t\tpayload[\u0027searchByColumns\u0027] \u003d _dict\n\n\t\tpayload[\u0027searchText\u0027] \u003d \u0027\u0027\t\"\"\"\n\t\t\n\t\tsystem.perspective.sendMessage(\u0027mhByFilter\u0027, payload \u003d payload)\n\n\telse:\n\t\tpass\n\t\t#self.props.data \u003d system.dataset.append(self.props.data, self.custom.dataSearchFalse)\n\t\t#self.custom.dataSearchFalse \u003d system.dataset.clearDataset(self.props.data)"
            }
          },
          "custom._devTypeUtil": {
            "onChange": {
              "enabled": null,
              "script": "\tif currentValue.value is True:\n\t\ttbl \u003d self.props\n\t\tds \u003d tbl.data\n\t\t\n\t\tfrom com.inductiveautomation.ignition.common import TypeUtilities\n\t\tjsonStr \u003d unicode(TypeUtilities.datasetToJSON(ds))\n\t\t#ds \u003d TypeUtilities.datasetFromJSON(jsonStr)\n\t\t\n\t\tsystem.perspective.print((jsonStr))"
            }
          }
        },
        "props": {
          "cells": {
            "style": {
              "classes": "Table/Cell_Dashboard"
            }
          },
          "columns": [
            {
              "align": "center",
              "boolean": "checkbox",
              "dateFormat": "MM/DD/YYYY",
              "editable": false,
              "field": "id",
              "footer": {
                "align": "center",
                "justify": "left",
                "style": {
                  "classes": ""
                },
                "title": ""
              },
              "header": {
                "align": "center",
                "justify": "left",
                "style": {
                  "classes": "Table/Column_Header"
                },
                "title": "id"
              },
              "justify": "left",
              "number": "value",
              "numberFormat": "0,0.##",
              "progressBar": {
                "bar": {
                  "color": "#62A3F6",
                  "linecap": "round",
                  "width": 5
                },
                "max": 100,
                "track": {
                  "color": "#DADADA",
                  "linecap": "round",
                  "width": 2
                },
                "value": {
                  "color": "#7D7D7D",
                  "show": true
                }
              },
              "render": "auto",
              "resizable": true,
              "sort": "none",
              "sortable": true,
              "strictWidth": true,
              "style": {
                "classes": "Table/Column_Normal"
              },
              "toggleSwitch": {
                "color": {
                  "selected": "#2196F3",
                  "unselected": "#FFFFFF"
                }
              },
              "viewParams": {},
              "viewPath": "",
              "visible": true,
              "width": 40
            },
            {
              "align": "center",
              "boolean": "checkbox",
              "dateFormat": "MM/DD/YYYY",
              "editable": false,
              "field": "bedId",
              "footer": {
                "align": "center",
                "justify": "left",
                "style": {
                  "classes": ""
                },
                "title": ""
              },
              "header": {
                "align": "center",
                "justify": "left",
                "style": {
                  "classes": "Table/Column_Header"
                },
                "title": "bedId"
              },
              "justify": "left",
              "number": "value",
              "numberFormat": "0,0.##",
              "progressBar": {
                "bar": {
                  "color": "#62A3F6",
                  "linecap": "round",
                  "width": 5
                },
                "max": 100,
                "track": {
                  "color": "#DADADA",
                  "linecap": "round",
                  "width": 2
                },
                "value": {
                  "color": "#7D7D7D",
                  "show": true
                }
              },
              "render": "auto",
              "resizable": true,
              "sort": "none",
              "sortable": true,
              "strictWidth": true,
              "style": {
                "classes": "Table/Column_Normal"
              },
              "toggleSwitch": {
                "color": {
                  "selected": "#2196F3",
                  "unselected": "#FFFFFF"
                }
              },
              "viewParams": {},
              "viewPath": "",
              "visible": true,
              "width": 300
            },
            {
              "align": "center",
              "boolean": "checkbox",
              "dateFormat": "MM/DD/YYYY",
              "editable": false,
              "field": "participantId",
              "footer": {
                "align": "center",
                "justify": "left",
                "style": {
                  "classes": ""
                },
                "title": ""
              },
              "header": {
                "align": "center",
                "justify": "left",
                "style": {
                  "classes": "Table/Column_Header"
                },
                "title": "participantId"
              },
              "justify": "left",
              "number": "value",
              "numberFormat": "0,0.##",
              "progressBar": {
                "bar": {
                  "color": "#62A3F6",
                  "linecap": "round",
                  "width": 5
                },
                "max": 100,
                "track": {
                  "color": "#DADADA",
                  "linecap": "round",
                  "width": 2
                },
                "value": {
                  "color": "#7D7D7D",
                  "show": true
                }
              },
              "render": "auto",
              "resizable": true,
              "sort": "none",
              "sortable": true,
              "strictWidth": true,
              "style": {
                "classes": "Table/Column_Normal"
              },
              "toggleSwitch": {
                "color": {
                  "selected": "#2196F3",
                  "unselected": "#FFFFFF"
                }
              },
              "viewParams": {},
              "viewPath": "",
              "visible": true,
              "width": ""
            },
            {
              "align": "center",
              "boolean": "checkbox",
              "dateFormat": "MM/DD/YYYY HH:mm:ss",
              "editable": false,
              "field": "timeCreated",
              "footer": {
                "align": "center",
                "justify": "left",
                "style": {
                  "classes": ""
                },
                "title": ""
              },
              "header": {
                "align": "center",
                "justify": "left",
                "style": {
                  "classes": "Table/Column_Header"
                },
                "title": "timeCreated"
              },
              "justify": "left",
              "number": "value",
              "numberFormat": "0,0.##",
              "progressBar": {
                "bar": {
                  "color": "#62A3F6",
                  "linecap": "round",
                  "width": 5
                },
                "max": 100,
                "track": {
                  "color": "#DADADA",
                  "linecap": "round",
                  "width": 2
                },
                "value": {
                  "color": "#7D7D7D",
                  "show": true
                }
              },
              "render": "auto",
              "resizable": true,
              "sort": "none",
              "sortable": true,
              "strictWidth": true,
              "style": {
                "classes": "Table/Column_Normal"
              },
              "toggleSwitch": {
                "color": {
                  "selected": "#2196F3",
                  "unselected": "#FFFFFF"
                }
              },
              "viewParams": {},
              "viewPath": "",
              "visible": true,
              "width": ""
            }
          ],
          "data": {
            "$": [
              "ds",
              192,
              1619379632003
            ],
            "$columns": [
              {
                "data": [
                  8,
                  20,
                  54,
                  73,
                  116
                ],
                "name": "id",
                "type": "Integer"
              },
              {
                "data": [
                  59,
                  10,
                  97,
                  51,
                  102
                ],
                "name": "bedId",
                "type": "Integer"
              },
              {
                "data": [
                  4664,
                  10,
                  628,
                  448,
                  4759
                ],
                "name": "participantId",
                "type": "Integer"
              },
              {
                "data": [
                  1596844333573,
                  1597017500757,
                  1607806887973,
                  1612395420063,
                  1616706319930
                ],
                "name": "timeCreated",
                "type": "Date"
              }
            ]
          },
          "pager": {
            "initialOption": 100
          },
          "rows": {
            "striped": {
              "enabled": false
            }
          },
          "selection": {
            "data": [
              {
                "bedId": 83,
                "id": 10,
                "participantId": 4662,
                "timeCreated": 1596848952110
              }
            ],
            "selectedColumn": "bedId",
            "selectedRow": 6
          },
          "style": {
            "classes": "Background/Default",
            "overflowX": "hidden"
          }
        },
        "scripts": {
          "customMethods": [
            {
              "name": "getDataDb",
              "params": [
                "payload"
              ],
              "script": "\timport extend.query\n\t\n\tquery \u003d \"\"\"\nSELECT TOP (1000) [id]\n\t      ,[bedId]\n\t      ,[participantId]\n\t      ,[timeCreated]\n\t\n\tFROM [RITIOps].[lodging].[Reservation]\n\tWHERE 1\u003d1 \n\tAND DATEPART(hour,timeCreated) \u003e 20 \n--\tOR DATEPART(hour,timeCreated) \u003c 3\n\nORDER BY id\n\n\"\"\"\n\targs \u003d []\t\n\n\tresult \u003d system.db.runPrepQuery(query, args, \u0027RITIOps\u0027)\n\n\treturn result\n"
            },
            {
              "name": "XgetDataDb",
              "params": [
                "payload"
              ],
              "script": "\timport extend.query\n\t\n\tquery \u003d \"\"\"\nDECLARE @dobYear int \u003d ?\t\n\t\nSELECT TOP 50\n\t h.id\n\t,h.firstName AS first_name\n\t,h.middleName AS middle_name\n\t,h.lastName AS last_name\n\t,h.suffix, h.nickname AS nick_name\n\t,\u0027***-**-\u0027 + RIGHT(h.SSN, 4) AS ssn \n\t,h.genderId AS gender_id\n\t,g.genderName AS gender\n\t,h.dob\n\t,h.raceId AS race_id\n\t,r.raceName AS race\n\t,h.disabilityTypeId AS disability_id\n\t,d.disabilityTypeName AS disability\n\t,h.veteranStatusId AS veteran_id\n\t,vet.veteranStatusName AS veteran\n\t,p.id AS participant_id\n\t,p.timeRetired AS participant_retired\n\t,e.id AS employee_id\n\t,e.timeRetired AS employee_retired\n\t,v.id AS volunteer_id\n\t,v.timeRetired AS volunteer_retired\nFROM humans.Human AS h \nLEFT OUTER JOIN humans.Gender AS g ON h.genderId \u003d g.id \nLEFT OUTER JOIN humans.Race AS r ON h.raceId \u003d r.id \nLEFT OUTER JOIN humans.DisabilityType AS d ON h.disabilityTypeId \u003d d.id \nLEFT OUTER JOIN humans.VeteranStatus AS vet ON h.veteranStatusId \u003d vet.id \nLEFT OUTER JOIN participant.Participant AS p ON h.id \u003d p.humanId \nLEFT OUTER JOIN staff.Employee AS e ON h.id \u003d e.humanId \nLEFT OUTER JOIN staff.Volunteer AS v ON h.id \u003d v.humanId\n\nWHERE 1\u003d1\n\tAND (YEAR(h.dob) \u003d @dobYear OR ISNULL(@dobYear,1) \u003d 1)\n\tAND h.raceId in (*?) \n\nORDER BY h.id\n\n\"\"\"\n# Examples: \n#AND [Provider].[providerTypeId] in (2,3) \n#AND cteCount.[countReferral] \u003e\u003d 2 \n#AND cteCount.[countReferral] \u003c\u003d 10\n\n\targs \u003d []\t\n\t\n\t###############################################\n\tyear \u003d payload.get(\u0027year\u0027)\n\targs +\u003d [year]\n\t# Comment: Solution No2 could be if year is None \n\t# than query \u003d query.replace(\u0027AND (YEAR(h.dob) \u003d ?\u0027,\u0027\u0027) (delete part of where clause inside query)\n\t\n\t################################################\n\t# providerTypeIds should be list [0,2]. If it is None whereInFix will be always true: 1 \u003d 1. \n\t# If it is single value will be [val]. \n\traceIds \u003d payload.get(\u0027raceIds\u0027)\n\t\n\twhereIn \u003d \u0027h.raceId in (*?)\u0027\n\twhereInFix, raceIdsFix \u003d extend.query.getWhereInParamFix(whereIn, raceIds)\n\n\tquery \u003d query.replace(whereIn, whereInFix)\n\targs +\u003d raceIdsFix\n\n\n\tresult \u003d system.db.runPrepQuery(query, args, \u0027RITIOps\u0027)\n\t\n\tcolNames \u003d system.dataset.getColumnHeaders(result)\n\n\treturn result\n"
            },
            {
              "name": "getPropsColumns",
              "params": [
                "dataset"
              ],
              "script": "\tjsonDefaultColumn \u003d \"\"\"\n  {\n\t    \"field\": \"\",\n\t    \"visible\": true,\n\t    \"editable\": false,\n\t    \"render\": \"auto\",\n\t    \"justify\": \"left\",\n\t    \"align\": \"center\",\n\t    \"resizable\": true,\n\t    \"sortable\": true,\n\t    \"sort\": \"none\",\n\t    \"viewPath\": \"\",\n\t    \"viewParams\": {},\n\t    \"boolean\": \"checkbox\",\n\t    \"number\": \"value\",\n\t    \"progressBar\": {\n\t      \"max\": 100,\n\t      \"bar\": {\n\t        \"color\": \"#62A3F6\",\n\t        \"linecap\": \"round\",\n\t        \"width\": 5\n\t      },\n\t      \"track\": {\n\t        \"color\": \"#DADADA\",\n\t        \"linecap\": \"round\",\n\t        \"width\": 2\n\t      },\n\t      \"value\": {\n\t        \"color\": \"#7D7D7D\",\n\t        \"show\": true\n\t      }\n\t    },\n\t    \"toggleSwitch\": {\n\t      \"color\": {\n\t        \"selected\": \"#2196F3\",\n\t        \"unselected\": \"#FFFFFF\"\n\t      }\n\t    },\n\t    \"numberFormat\": \"0,0.##\",\n\t    \"dateFormat\": \"MM/DD/YYYY\",\n\t    \"width\": \"\",\n\t    \"strictWidth\": false,\n\t    \"header\": {\n\t      \"title\": \"\",\n\t      \"justify\": \"left\",\n\t      \"align\": \"center\",\n\t      \"style\": {\n\t        \"classes\": \"Table/Column_Header\"\n\t      }\n\t    },\n\t    \"footer\": {\n\t      \"title\": \"\",\n\t      \"justify\": \"left\",\n\t      \"align\": \"center\",\n\t      \"style\": {\n\t        \"classes\": \"\"\n\t      }\n\t    },\n\t    \"style\": {\n\t      \"classes\": \"Table/Column_Normal\"\n\t    }\n\t  },\t\n\t\"\"\"\n\n\tcolumnsForced \u003d [\n\t  {\n\t    \"field\": \"id\",\n\t    \"width\": 40,\n\t    \"title\": \"id\"\n\t  },\n\t  {\n\t    \"field\": \"bedId\",\n\t    \"width\": 300,\n\t    \"title\": \"bedId\"\n\t  },\n\t  {\n\t    \"field\": \"participantId\",\n\t    \"width\": \"\",\n\t    \"title\": \"participantId\"\n\t  },\t  \n\t  {\n\t    \"field\": \"timeCreated\",\n\t    \"width\": \"\",\n\t    \"title\": \"timeCreated\"\n\t  }\n\t]\n\n\tcolNames \u003d system.dataset.getColumnHeaders(dataset)\n\n\t_columns \u003d []\n\tfor col in colNames:\n\t\t# This conversion json_\u003edict create actually deepcopy\n\t\tpyColumn \u003d system.util.jsonDecode(jsonDefaultColumn)\n\t\t\n\t\t# Note: Field must contain only letters and numbers.\n\t\tpyColumn[\u0027field\u0027] \u003d col\n\t\t\n\t\t_dictCol \u003d None\n\t\tfor item in columnsForced:\n\t\t\tif item[\u0027field\u0027] \u003d\u003d pyColumn[\u0027field\u0027]:\n\t\t\t\t_dictCol \u003d item.copy() \n\t\t\t\n\t\t\n\t\t#ystem.perspective.print((_dictCol))\n\t\t\n\t\tpyColumn[\u0027header\u0027][\u0027title\u0027] \u003d _dictCol[\u0027title\u0027] if _dictCol else \u0027\u0027\n\t\t\n\t\tif _dictCol:\n\t\t\tpyColumn[\u0027width\u0027] \u003d _dictCol[\u0027width\u0027]\n\t\t\tpyColumn[\u0027strictWidth\u0027] \u003d True\n\n\t\t#if col \u003d\u003d \u0027id\u0027:\n\t\t\t#pyColumn[\u0027header\u0027][\u0027title\u0027] \u003d \u0027 \u0027\n\t\t\t#pyColumn[\"render\"] \u003d \"view\"\n\t\t\t#pyColumn[\"justify\"] \u003d \"center\"\n\t\t\t#pyColumn[\"resizable\"] \u003d False\n\t\t\t#pyColumn[\"sortable\"] \u003d False\n\t\t\t#pyColumn[\"viewPath\"] \u003d \"Providers/Dashboard/Components/Tables/Templates/TableOptions\"\t\n\t\t\t\t\n\t\tif col \u003d\u003d \u0027timeCreated\u0027:\n\t\t\t#pyColumn[\"render\"] \u003d \"view\"\n\t\t\tpyColumn[\"dateFormat\"] \u003d \"MM/DD/YYYY HH:mm:ss\"\t\n\t\t\n\t\t#if col \u003d\u003d \u0027phone\u0027:\n\t\t\t#pyColumn[\u0027numberFormat\u0027] \u003d \"none\"\t\n\t\n\t\t#if col \u003d\u003d \u0027zipCode\u0027:\n\t\t\t#pyColumn[\u0027numberFormat\u0027] \u003d \"none\"\t\n\t\t\t\t\t\n\t\t_columns.append(pyColumn)\n\t\n\t#ystem.perspective.print((\"_columns: \",_columns))\n\t\n\treturn _columns"
            },
            {
              "name": "correctTimeForClient",
              "params": [
                "pyds",
                "columnsToCorrect"
              ],
              "script": "\t# Table automaticaly change datetime according to client timezone, \n\t# For this table we don\u0027t need automatic conversion, we must recorrect datetimes, according client timezone.\n\t# Actually to see same values like in db.\n\n\tcorrectionTime \u003d int(60*(system.date.getTimezoneOffset() - self.session.props.device.timezone.utcOffset)) \n\t\n\tlistDateFix \u003d [[]*len(columnsToCorrect)]\n\tfor rowIndex, row in enumerate(pyds):\n\t\tfor colIndex, col in enumerate(columnsToCorrect):\n\t\t\tlistDateFix[colIndex].append(system.date.addMinutes(row[col], correctionTime))\n\t\n\t\n\t# TODO add columns as python list on proper place\n\t\n\treturn pyds\n"
            },
            {
              "name": "setMisc",
              "params": [],
              "script": "\t\n\tself.props.cells.style\u003d {\n\t    \"classes\": \"Table/Cell_Dashboard\"\n\t}\n\t\n\tself.props.style \u003d {\n\t  \"classes\": \"Background/Default\",\n\t  \"overflowX\": \"hidden\"\n\t}\n"
            },
            {
              "name": "getSearchData",
              "params": [
                "payload",
                "data",
                "dataSearchFalse"
              ],
              "script": "\tfrom java.util import Date\n\tfrom java.lang import String\n\t\n\t# searchText is string\n\t_searchText \u003d payload.get(\u0027searchText\u0027)\n\t_textLow \u003d unicode(_searchText).lower() if _searchText else \u0027\u0027\n\t\t\n\t# _searchByColumns is dictionary\n\t_searchByColumns \u003d payload.get(\u0027searchByColumns\u0027)\n\t\n\t\n\tif not(_searchText) and not(_searchByColumns):\n\t\treturn data, dataSearchFalse\n\t\n\tcolTypes \u003d data.getColumnTypes()\n\tcolNames \u003d system.dataset.getColumnHeaders(data)\n\n\t# Example: colTypes \u003d [class java.lang.Integer, class java.lang.String, class java.util.Date]\n\n\tif data.rowCount \u003d\u003d 1 and data.getValueAt(0,\u0027id\u0027) is None:\n\t\tdata \u003d system.dataset.deleteRow(data,0)\n\t\n\t# Place all data to dataUnion variable\n\tdataUnion \u003d system.dataset.appendDataset(data, dataSearchFalse)\n\n\t\n\trowsIndexSearchOk \u003d []\n\trowsIndexSearchNok \u003d []\n\t\n\tfor rowIndex, row in enumerate(system.dataset.toPyDataSet(dataUnion)):\n\t\t_isSearchTextFound \u003d False\n\t\t_isSearchByColumn \u003d True\n\t\t\n\t\tfor colIndex, col in enumerate(colNames):\n\t\t\t\n\t\t\tif colTypes[colIndex] is Date:  \n\t\t\t\tcontinue\n\t\t\t\t\n\t\t\t_colTextSearch \u003d _searchByColumns.get(col)\n\t\t\t_cellLow \u003d (unicode(row[col])).lower() if row[col] is not None else \u0027\u0027\n\t\t\t\n\t\t\tif _colTextSearch and col in _searchByColumns:\n\t\t\t\tif not(_cellLow) or _colTextSearch not in _cellLow:\n\t\t\t\t\t_isSearchByColumn \u003d False\n\t\t\t\t\tbreak\n\t\t\t\n\t\t\t\n\t\t\tif _searchText:\n\t\t\t\tif _cellLow and _isSearchTextFound is False: \n\n\t\t\t\t\t_isSearchTextFound \u003d  _textLow in _cellLow\n\t\t\telse:\n\t\t\t\t_isSearchTextFound \u003d True\n\n\t\tif \t_isSearchTextFound is True and _isSearchByColumn is True:\n\t\t\trowsIndexSearchOk.append(rowIndex)\n\t\telse:\n\n\t\t\trowsIndexSearchNok.append(rowIndex)\n\n\tdataSearchTrue \u003d system.dataset.deleteRows(dataUnion, rowsIndexSearchNok)\n\tdataSearchFalse \u003d system.dataset.deleteRows(dataUnion, rowsIndexSearchOk)\t\n\n\tif dataSearchTrue.rowCount \u003d\u003d 0:\n\t\t_dummyRow \u003d [\u0027\u0027 if x is String else None for x in colTypes]\n\t\tdataSearchTrue \u003d system.dataset.addRow(dataSearchTrue, _dummyRow)\n\t\n\treturn dataSearchTrue, dataSearchFalse\n"
            },
            {
              "name": "doByConditionAndFilter",
              "params": [
                "payload"
              ],
              "script": "\t# 1. Get data from DB \n\t_data \u003d self.getDataDb(payload)\n\t#_dataSearchFalse \u003d system.dataset.clearDataset(_data)\n\n\t# 2. Set some misc props if necessary (explicit)\n\tself.setMisc()\n\n\t# 3. Step get columns props (explicit adjustment)\n\tself.props.columns \u003d self.getPropsColumns(_data)\n\n\t# 4. Correct values in datetime column according client timezone. (check comments inside function)\n\t#_data \u003d self.correctTimeForClient(_data, [\u0027dob\u0027])\n\t#ystem.perspective.print((\u0027step2:\u0027))\n\n\t#if payload:\n\t\t#_data, _dataSearchFalse\u003d self.getSearchData(payload, _data, _dataSearchFalse)\n\t\n\t# 2. Sort and set data\n\t# Sort by providerName. Note: last argument is False which force alphanumeric ordering\n\t_data \u003d system.dataset.sort (_data ,\u0027id\u0027,True, False) \n\t\n\tself.props.data \u003d _data\n\t#self.custom.dataSearchFalse \u003d _dataSearchFalse\n\t\n\t# 3. Send message to Kpis\n\t#self.sendMessageToKpis(_data)\n\t\n\t# 7. Send message to Kpis\n\t#self.sendMessageToKpis(_data)\n\n"
            },
            {
              "name": "doByFilter",
              "params": [
                "payload"
              ],
              "script": "\t_data \u003d self.props.data \n\t_dataSearchFalse \u003d self.custom.dataSearchFalse\n\t\n\t# 1. Perfom search filtering\n\t\t# Place all data to dataUnion variable\n\n\t\n\tif payload:\n\t\t_data, _dataSearchFalse\u003d self.getSearchData(payload, _data, _dataSearchFalse)\n\n\t# 2. Sort and set data\n\t# Sort by providerName. Note: last argument is False which force alphanumeric ordering\n\t_data \u003d system.dataset.sort (_data ,\u0027id\u0027,True, False) \n\t\n\tself.props.data \u003d _data\n\tself.custom.dataSearchFalse \u003d _dataSearchFalse\n\t\n\t# 3. Send message to Kpis\n\tself.sendMessageToKpis(_data)"
            },
            {
              "name": "sendMessageToKpis",
              "params": [
                "data"
              ],
              "script": "\t# Send message to KPIs\n\tpayload \u003d {}\n\t\n\t\n\tif data.rowCount \u003e 0:\n\t\tpayload[\u0027providerIds\u0027] \u003d []\n\t\t#payload[\u0027totalReferralsYtd\u0027] \u003d 0\t\n\t\tfor rowIndex, row in enumerate(system.dataset.toPyDataSet(data)):\n\t\t\tpayload[\u0027providerIds\u0027].append(row[\u0027id\u0027])\n\t\n\tsystem.perspective.sendMessage(\u0027mhProviderDashboardKpiHeader\u0027,payload)"
            }
          ],
          "extensionFunctions": null,
          "messageHandlers": [
            {
              "messageType": "mhByFilter",
              "pageScope": true,
              "script": "\t\n\tself.doByFilter(payload)\n\t",
              "sessionScope": false,
              "viewScope": false
            },
            {
              "messageType": "mhByConditionAndFilter",
              "pageScope": true,
              "script": "\tsystem.perspective.print((\u0027Msgstep1\u0027))\n\tself.doByConditionAndFilter(payload)",
              "sessionScope": false,
              "viewScope": false
            }
          ]
        },
        "type": "ia.display.table"
      },
      {
        "meta": {
          "name": "lblRowCount"
        },
        "position": {
          "basis": "32px"
        },
        "propConfig": {
          "props.text": {
            "binding": {
              "config": {
                "expression": "\u0027Humans Dev - Rows: \u0027 + toStr(len({../Table.props.data}))"
              },
              "type": "expr"
            }
          }
        },
        "props": {
          "style": {
            "classes": "ActivityCards/Card_TextDark Background/Default",
            "textAlign": "center"
          }
        },
        "type": "ia.display.label"
      }
    ],
    "meta": {
      "name": "root"
    },
    "props": {
      "direction": "column",
      "justify": "space-around",
      "style": {
        "overflow": "visible"
      }
    },
    "type": "ia.container.flex"
  }
}