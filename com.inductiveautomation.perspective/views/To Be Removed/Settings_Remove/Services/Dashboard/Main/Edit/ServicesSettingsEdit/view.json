{
  "custom": {
    "edit_data": {
      "active": -1,
      "serviceDescription": "",
      "serviceId": 2,
      "serviceName": "",
      "serviceType": "",
      "serviceTypeId": -1
    },
    "programs": [
      42,
      44,
      45,
      46,
      47,
      48,
      29,
      1,
      49,
      50,
      51,
      52,
      53,
      54,
      55,
      56,
      57,
      58,
      59,
      60
    ]
  },
  "params": {
    "row_data": {
      "active": -1,
      "serviceDescription": "",
      "serviceId": 1,
      "serviceName": "",
      "serviceType": "",
      "serviceTypeId": -1
    }
  },
  "propConfig": {
    "custom.edit_data": {
      "persistent": true
    },
    "custom.edit_data.id": {
      "binding": {
        "config": {
          "path": "view.params.row_data.id"
        },
        "type": "property"
      },
      "onChange": {
        "enabled": null,
        "script": "\t#Move the row data to the edit data any time the row id changes\n\tself.custom.edit_data \u003d self.params.row_data"
      }
    },
    "custom.edit_data.row_id": {
      "binding": {
        "config": {
          "path": "view.params.row_data.row_id"
        },
        "type": "property"
      },
      "onChange": {
        "enabled": null,
        "script": "\t#Move the row data to the edit data any time the row id changes\n\tself.custom.edit_data \u003d self.params.row_data"
      }
    },
    "custom.edit_data.service_id": {
      "binding": {
        "config": {
          "path": "view.params.row_data.service_id"
        },
        "type": "property"
      },
      "onChange": {
        "enabled": null,
        "script": "\t#Move the row data to the edit data any time the row id changes\n\tself.custom.edit_data \u003d self.params.row_data"
      }
    },
    "custom.edit_data[0].id": {
      "binding": {
        "config": {
          "path": "view.params.drugscreenlogid"
        },
        "type": "property"
      }
    },
    "custom.programs": {
      "binding": {
        "config": {
          "parameters": {
            "service_id": "{view.params.row_data.serviceId}"
          },
          "queryPath": "Settings/Services/ServicesSettingsProgramsSelect"
        },
        "transforms": [
          {
            "code": "\tlist \u003d []\n\tfor row in range(value.getRowCount()):\n\t\tselection \u003d value.getValueAt(row,\u0027program_id\u0027)\n\t\tlist.append(selection)\n\treturn list",
            "type": "script"
          }
        ],
        "type": "query"
      },
      "persistent": true
    },
    "params.row_data": {
      "paramDirection": "input",
      "persistent": true
    },
    "params.row_data.active": {
      "paramDirection": "input",
      "persistent": true
    },
    "params.row_data.programs": {
      "paramDirection": "input",
      "persistent": true
    },
    "params.row_data.serviceDescription": {
      "paramDirection": "input",
      "persistent": true
    },
    "params.row_data.serviceId": {
      "paramDirection": "input",
      "persistent": true
    },
    "params.row_data.serviceName": {
      "paramDirection": "input",
      "persistent": true
    },
    "params.row_data.serviceType": {
      "paramDirection": "input",
      "persistent": true
    },
    "params.row_data.serviceTypeId": {
      "paramDirection": "input",
      "persistent": true
    }
  },
  "props": {
    "defaultSize": {
      "height": 475,
      "width": 1043
    }
  },
  "root": {
    "children": [
      {
        "meta": {
          "name": "EmbeddedView Header"
        },
        "position": {
          "basis": "25px",
          "shrink": 0
        },
        "propConfig": {
          "props.params.Text": {
            "binding": {
              "config": {
                "path": "view.custom.edit_data.serviceId"
              },
              "transforms": [
                {
                  "expression": "if({value} \u003d -1,\u0027New Service\u0027,\u0027Edit Service\u0027)",
                  "type": "expression"
                }
              ],
              "type": "property"
            }
          }
        },
        "props": {
          "path": "Settings/Templates/Header"
        },
        "type": "ia.display.view"
      },
      {
        "meta": {
          "name": "EmbeddedView Row1"
        },
        "position": {
          "basis": "100px",
          "shrink": 0
        },
        "propConfig": {
          "props.params.active": {
            "binding": {
              "config": {
                "bidirectional": true,
                "path": "view.custom.edit_data.active"
              },
              "type": "property"
            }
          },
          "props.params.serviceDescription": {
            "binding": {
              "config": {
                "bidirectional": true,
                "path": "view.custom.edit_data.serviceDescription"
              },
              "type": "property"
            }
          },
          "props.params.serviceId": {
            "binding": {
              "config": {
                "bidirectional": true,
                "path": "view.custom.edit_data.serviceId"
              },
              "type": "property"
            }
          },
          "props.params.serviceName": {
            "binding": {
              "config": {
                "bidirectional": true,
                "path": "view.custom.edit_data.serviceName"
              },
              "type": "property"
            }
          },
          "props.params.serviceTypeId": {
            "binding": {
              "config": {
                "bidirectional": true,
                "path": "view.custom.edit_data.serviceTypeId"
              },
              "type": "property"
            }
          }
        },
        "props": {
          "path": "Settings/Services/Dashboard/Main/Edit/Row1",
          "style": {
            "marginLeft": 25,
            "marginRight": 25
          }
        },
        "type": "ia.display.view"
      },
      {
        "meta": {
          "name": "EmbeddedView Row2"
        },
        "position": {
          "basis": "100px",
          "shrink": 0
        },
        "propConfig": {
          "props.params.programs": {
            "binding": {
              "config": {
                "bidirectional": true,
                "path": "view.custom.programs"
              },
              "type": "property"
            }
          }
        },
        "props": {
          "path": "Settings/Services/Dashboard/Main/Edit/Row2",
          "style": {
            "marginLeft": 25,
            "marginRight": 25
          }
        },
        "type": "ia.display.view"
      },
      {
        "children": [
          {
            "events": {
              "component": {
                "onActionPerformed": {
                  "config": {
                    "script": "\t#system.perspective.print(\"New Service Button Pressed\")\n\t#Send the message to refresh the table\n\tmessageType \u003d \u0027refreshServicesSettings\u0027\n\tsystem.perspective.sendMessage(messageType)\n"
                  },
                  "scope": "G",
                  "type": "script"
                }
              }
            },
            "meta": {
              "name": "button_new"
            },
            "position": {
              "basis": "120px",
              "shrink": 0
            },
            "props": {
              "style": {
                "classes": "Buttons/Secondary",
                "marginBottom": "5px",
                "marginLeft": "20px",
                "marginTop": "5px"
              },
              "text": "New Service"
            },
            "type": "ia.input.button"
          },
          {
            "events": {
              "component": {
                "onActionPerformed": {
                  "config": {
                    "script": "\timport traceback\n\ttry:\n\t\tproject \u003d \"RITI\"\n\t\t### Declare parameters \n\t\tservice_id \u003d self.view.custom.edit_data.serviceId\n\t\ttype_id \u003d self.view.custom.edit_data.serviceTypeId\n\t\tservice_name \u003d self.view.custom.edit_data.serviceName\n\t\tservice_desc \u003d self.view.custom.edit_data.serviceDescription\n\t\ttime_created \u003d system.date.now()\n\t\tactive \u003d self.view.custom.edit_data.active\n\t\tif active \u003d\u003d 0:\n\t\t\ttime_retired \u003d system.date.now()\n\t\telse:\n\t\t\ttime_retired \u003d None\n\n\t\n\t\t## Check if parameters are filled in correctly \n\t\tif (service_id is None):\n\t\t\tvalid \u003d False\n\t\t\tsystem.perspective.print(\"Service ID Error\")\n\t\telif (time_created is None):\n\t\t\tvalid \u003d False\n\t\t\tsystem.perspective.print(\"Date Error\")\n\t\telif (service_name is None) or (len(service_name) \u003c 1):\n\t\t\tvalid \u003d False\n\t\t\tsystem.perspective.print(\"Service Name Error\")\n\t\telif (type_id is None) or (int(type_id) \u003c 0):\n\t\t\tvalid \u003d False\n\t\t\tsystem.perspective.print(\"Service Type ID Error\")\n\t\telse:\n\t\t\tvalid \u003d True\n\t\t\tsystem.perspective.print(\"Service Settings Data Valid\")\n\t\t\n\t\t### Check if data is valid otherwise show error message.\n\t\tif valid:\n\t\t\t### Check if the user is creating new data\n\t\t\tif service_id \u003d\u003d -1:#Insert new data, no row_id\n\t\t\t\t#system.perspective.print(\"Insert New Data\")\n\t\t\t\tpath \u003d \"Settings/Services/ServiceSettingsServiceInsert\"\n\t\t\t\tparameters \u003d {\"service_name\":service_name,\n\t\t\t\t\t\t\t\"service_desc\":service_desc,\n\t\t\t\t\t\t\t\"type_id\":type_id,\n\t\t\t\t\t\t\t\"time_created\":time_created}\n\t\t\t\tnew_service \u003d system.db.runNamedQuery(project\u003dproject,path\u003dpath,parameters\u003dparameters, getKey\u003dTrue)\n\t\t\t\t#Add the associated programs\n\t\t\t\tif len(self.view.custom.programs):\n\t\t\t\t\tfor row in range(len(self.view.custom.programs)):\n\t\t\t\t\t\tprogram \u003d self.view.custom.programs[row]\n\t\t\t\t\t\tpath \u003d \"Settings/Services/ServiceSettingsProgramInsert\"\n\t\t\t\t\t\tparameters \u003d {\"program_id\":program,\n\t\t\t\t\t\t\t\t\t\"service_id\":new_service}\n\t\t\t\t\t\tRefresh \u003d system.db.runNamedQuery(project\u003dproject,path\u003dpath,parameters\u003dparameters, getKey\u003dTrue)\t\t\n\t\t\t\t#system.perspective.print(\"Insert data\")\n\t\t\n\t\t\t##### Check if the user is editing existing data\n\t\t\telif service_id \u003e\u003d 0:#Update existing data on specified row_id\n\t\t\t\t#system.perspective.print(\"Update Exisiting Data\")\n\t\t\t\tif active \u003d\u003d 1:\n\t\t\t\t\tpath \u003d \"Settings/Services/ServiceSettingsUpdateActive\"\n\t\t\t\t\tparameters \u003d {\"service_id\":service_id,\n\t\t\t\t\t\t\t\t\"service_name\":service_name,\n\t\t\t\t\t\t\t\t\"service_desc\":service_desc,\n\t\t\t\t\t\t\t\t\"type_id\":type_id,\n\t\t\t\t\t\t\t\t\"time_created\":time_created}\n\t\t\t\telse:\n\t\t\t\t\tpath \u003d \"Settings/Services/ServiceSettingsUpdateInactive\"\n\t\t\t\t\tparameters \u003d  {\"service_id\":service_id,\n\t\t\t\t\t\t\t\t\"service_name\":service_name,\n\t\t\t\t\t\t\t\t\"service_desc\":service_desc,\n\t\t\t\t\t\t\t\t\"type_id\":type_id,\n\t\t\t\t\t\t\t\t\"time_created\":time_created,\n\t\t\t\t\t\t\t\t\"time_retired\":time_retired}\n\t\t\t\tRefresh \u003d system.db.runNamedQuery(project\u003dproject,path\u003dpath,parameters\u003dparameters, getKey\u003dTrue)\t\t\t\n\t\t\t\t#Delete and re-insert the programs associated with the service\n\t\t\t\tpath \u003d \"Settings/Services/ServiceSettingsProgramAssociationDelete\"\n\t\t\t\tparameters \u003d {\"service_id\":service_id}\n\t\t\t\tRefresh \u003d system.db.runNamedQuery(project\u003dproject,path\u003dpath,parameters\u003dparameters, getKey\u003dTrue)\t\n\t\t\t\t#system.perspective.print(type(self.view.custom.edit_data.programs))\n\t\t\t\tif len(self.view.custom.programs):\n\t\t\t\t\tfor row in range(len(self.view.custom.programs)):\n\t\t\t\t\t\tprogram \u003d self.view.custom.programs[row]\n\t\t\t\t\t\t#program_id \u003d program.program_id\n\t\t\t\t\t\tpath \u003d \"Settings/Services/ServiceSettingsProgramInsert\"\n\t\t\t\t\t\tparameters \u003d {\"program_id\":program,\n\t\t\t\t\t\t\t\t\t\"service_id\":service_id}\n\t\t\t\t\t\tRefresh \u003d system.db.runNamedQuery(project\u003dproject,path\u003dpath,parameters\u003dparameters, getKey\u003dTrue)\n\t\t\t\t#system.perspective.print(\"Update Data Complete\")\n\t\t\t\t\n\t\t\t##### Refresh the table\n\t\t\t#system.perspective.print(\"Refresh Services Settings Table\")\n\t\t\tsystem.perspective.sendMessage(messageType\u003d\"refreshServicesSettingsData\", payload\u003d{}, scope\u003d\"session\")\n\t\t\n\t\t\n\t\telse:\n\t\t\tself.getSibling(\"Label\").showMessage(\"Please fill in all the fields correctly before saving.\")\n\texcept:\n\t\tlogger \u003d system.util.getLogger(\"ServicesSettingsEdit button_save\")\n\t\tmsg \u003d traceback.format_exc()\n\t\tlogger.error(msg)\n\t\tself.getSibling(\"Label\").showMessage(\"Something went wrong while saving data. Please try again.\")\t"
                  },
                  "scope": "G",
                  "type": "script"
                }
              }
            },
            "meta": {
              "name": "button_save"
            },
            "position": {
              "basis": "120px",
              "shrink": 0
            },
            "propConfig": {
              "props.text": {
                "binding": {
                  "config": {
                    "expression": "if({view.custom.edit_data.serviceId} \u003d -1,\u0027Save Service\u0027,\u0027Update Service\u0027)"
                  },
                  "type": "expr"
                }
              }
            },
            "props": {
              "style": {
                "classes": "Buttons/Main",
                "marginBottom": "5px",
                "marginLeft": "10px",
                "marginTop": "5px"
              }
            },
            "type": "ia.input.button"
          },
          {
            "meta": {
              "name": "Label",
              "visible": false
            },
            "position": {
              "basis": "50px",
              "grow": 1
            },
            "props": {
              "style": {
                "classes": "Text/Error_Message"
              },
              "text": "Please fill in all the fields correctly before saving."
            },
            "scripts": {
              "customMethods": [
                {
                  "name": "showMessage",
                  "params": [
                    "message"
                  ],
                  "script": "\timport time\n\tself.props.text \u003d message\n\tself.meta.visible \u003d True\n\ttime.sleep(5)\n\tself.meta.visible \u003d False\n\t"
                }
              ],
              "extensionFunctions": null,
              "messageHandlers": []
            },
            "type": "ia.display.label"
          }
        ],
        "meta": {
          "name": "root Actions"
        },
        "position": {
          "basis": "50px",
          "shrink": 0
        },
        "props": {
          "style": {
            "borderTopColor": "#9db8d1",
            "borderTopStyle": "solid",
            "borderTopWidth": "1px",
            "classes": "Background/Default",
            "marginTop": "5px",
            "paddingTop": "5px"
          }
        },
        "type": "ia.container.flex"
      },
      {
        "meta": {
          "name": "Label"
        },
        "position": {
          "basis": "30px",
          "display": false,
          "shrink": 0
        },
        "propConfig": {
          "props.text": {
            "binding": {
              "config": {
                "expression": "\u0027Service ID:\u0027 + \r\n{view.custom.edit_data.serviceId} + \r\n\u0027, Programs:\u0027 + \r\n{view.custom.programs}"
              },
              "type": "expr"
            }
          }
        },
        "props": {
          "style": {
            "classes": "Text/Error_Message"
          }
        },
        "type": "ia.display.label"
      }
    ],
    "meta": {
      "name": "root"
    },
    "props": {
      "direction": "column",
      "style": {
        "classes": "Background/Default"
      }
    },
    "type": "ia.container.flex"
  }
}